// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(loroFFI)
    import loroFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_loro_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_loro_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public protocol ContainerIdLike: Any {
    func asContainerId(ty: ContainerType) -> ContainerId
}

open class ContainerIdLikeImpl:
    ContainerIdLike
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_containeridlike(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_containeridlike(pointer, $0) }
    }

    open func asContainerId(ty: ContainerType) -> ContainerId {
        return try! FfiConverterTypeContainerID.lift(try! rustCall {
            uniffi_loro_fn_method_containeridlike_as_container_id(self.uniffiClonePointer(),
                                                                  FfiConverterTypeContainerType.lower(ty), $0)
        })
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceContainerIdLike {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceContainerIdLike = .init(
        asContainerId: { (
            uniffiHandle: UInt64,
            ty: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> ContainerId in
                guard let uniffiObj = try? FfiConverterTypeContainerIdLike.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.asContainerId(
                    ty: FfiConverterTypeContainerType.lift(ty)
                )
            }

            let writeReturn = { uniffiOutReturn.pointee = FfiConverterTypeContainerID.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeContainerIdLike.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface ContainerIdLike: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitContainerIdLike() {
    uniffi_loro_fn_init_callback_vtable_containeridlike(&UniffiCallbackInterfaceContainerIdLike.vtable)
}

public struct FfiConverterTypeContainerIdLike: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<ContainerIdLike>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ContainerIdLike

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ContainerIdLike {
        return ContainerIdLikeImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ContainerIdLike) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContainerIdLike {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ContainerIdLike, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeContainerIdLike_lift(_ pointer: UnsafeMutableRawPointer) throws -> ContainerIdLike {
    return try FfiConverterTypeContainerIdLike.lift(pointer)
}

public func FfiConverterTypeContainerIdLike_lower(_ value: ContainerIdLike) -> UnsafeMutableRawPointer {
    return FfiConverterTypeContainerIdLike.lower(value)
}

public protocol CursorProtocol: AnyObject {}

open class Cursor:
    CursorProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_cursor(self.pointer, $0) }
    }

    public convenience init(id: Id?, container: ContainerId, side: Side, originPos: UInt32) {
        let pointer =
            try! rustCall {
                uniffi_loro_fn_constructor_cursor_new(
                    FfiConverterOptionTypeID.lower(id),
                    FfiConverterTypeContainerID.lower(container),
                    FfiConverterTypeSide.lower(side),
                    FfiConverterUInt32.lower(originPos), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_cursor(pointer, $0) }
    }
}

public struct FfiConverterTypeCursor: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Cursor

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Cursor {
        return Cursor(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Cursor) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Cursor {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Cursor, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeCursor_lift(_ pointer: UnsafeMutableRawPointer) throws -> Cursor {
    return try FfiConverterTypeCursor.lift(pointer)
}

public func FfiConverterTypeCursor_lower(_ value: Cursor) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCursor.lower(value)
}

public protocol FrontiersProtocol: AnyObject {}

open class Frontiers:
    FrontiersProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_frontiers(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_frontiers(pointer, $0) }
    }
}

public struct FfiConverterTypeFrontiers: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Frontiers

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Frontiers {
        return Frontiers(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Frontiers) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Frontiers {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Frontiers, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeFrontiers_lift(_ pointer: UnsafeMutableRawPointer) throws -> Frontiers {
    return try FfiConverterTypeFrontiers.lift(pointer)
}

public func FfiConverterTypeFrontiers_lower(_ value: Frontiers) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFrontiers.lower(value)
}

public protocol IdSpanProtocol: AnyObject {}

open class IdSpan:
    IdSpanProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_idspan(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_idspan(pointer, $0) }
    }
}

public struct FfiConverterTypeIdSpan: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = IdSpan

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> IdSpan {
        return IdSpan(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: IdSpan) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IdSpan {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: IdSpan, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeIdSpan_lift(_ pointer: UnsafeMutableRawPointer) throws -> IdSpan {
    return try FfiConverterTypeIdSpan.lift(pointer)
}

public func FfiConverterTypeIdSpan_lower(_ value: IdSpan) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIdSpan.lower(value)
}

public protocol LoroCounterProtocol: AnyObject {
    /**
     * Decrement the counter by the given value.
     */
    func decrement(value: Double) throws

    /**
     * Get the current value of the counter.
     */
    func getValue() -> Double

    /**
     * Return container id of the Counter.
     */
    func id() -> ContainerId

    /**
     * Increment the counter by the given value.
     */
    func increment(value: Double) throws
}

open class LoroCounter:
    LoroCounterProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorocounter(self.pointer, $0) }
    }

    /**
     * Create a new Counter.
     */
    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_loro_fn_constructor_lorocounter_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorocounter(pointer, $0) }
    }

    /**
     * Decrement the counter by the given value.
     */
    open func decrement(value: Double) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorocounter_decrement(self.uniffiClonePointer(),
                                                    FfiConverterDouble.lower(value), $0)
    }
    }

    /**
     * Get the current value of the counter.
     */
    open func getValue() -> Double {
        return try! FfiConverterDouble.lift(try! rustCall {
            uniffi_loro_fn_method_lorocounter_get_value(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return container id of the Counter.
     */
    open func id() -> ContainerId {
        return try! FfiConverterTypeContainerID.lift(try! rustCall {
            uniffi_loro_fn_method_lorocounter_id(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Increment the counter by the given value.
     */
    open func increment(value: Double) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorocounter_increment(self.uniffiClonePointer(),
                                                    FfiConverterDouble.lower(value), $0)
    }
    }
}

public struct FfiConverterTypeLoroCounter: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroCounter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroCounter {
        return LoroCounter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroCounter) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroCounter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroCounter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeLoroCounter_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroCounter {
    return try FfiConverterTypeLoroCounter.lift(pointer)
}

public func FfiConverterTypeLoroCounter_lower(_ value: LoroCounter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroCounter.lower(value)
}

public protocol LoroDocProtocol: AnyObject {
    /**
     * Attach the document state to the latest known version.
     *
     * > The document becomes detached during a `checkout` operation.
     * > Being `detached` implies that the `DocState` is not synchronized with the latest version of the `OpLog`.
     * > In a detached state, the document is not editable, and any `import` operations will be
     * > recorded in the `OpLog` without being applied to the `DocState`.
     */
    func attach()

    /**
     * Checkout the `DocState` to a specific version.
     *
     * > The document becomes detached during a `checkout` operation.
     * > Being `detached` implies that the `DocState` is not synchronized with the latest version of the `OpLog`.
     * > In a detached state, the document is not editable, and any `import` operations will be
     * > recorded in the `OpLog` without being applied to the `DocState`.
     *
     * You should call `attach` to attach the `DocState` to the latest version of `OpLog`.
     */
    func checkout(frontiers: Frontiers) throws

    /**
     * Checkout the `DocState` to the latest version.
     *
     * > The document becomes detached during a `checkout` operation.
     * > Being `detached` implies that the `DocState` is not synchronized with the latest version of the `OpLog`.
     * > In a detached state, the document is not editable, and any `import` operations will be
     * > recorded in the `OpLog` without being applied to the `DocState`.
     *
     * This has the same effect as `attach`.
     */
    func checkoutToLatest()

    /**
     * Commit the cumulative auto commit transaction.
     *
     * There is a transaction behind every operation.
     * It will automatically commit when users invoke export or import.
     * The event will be sent after a transaction is committed
     */
    func commit()

    /**
     * Force the document enter the detached mode.
     *
     * In this mode, when you importing new updates, the [loro_internal::DocState] will not be changed.
     *
     * Learn more at https://loro.dev/docs/advanced/doc_state_and_oplog#attacheddetached-status
     */
    func detach()

    /**
     * Export all the ops not included in the given `VersionVector`
     */
    func exportFrom(vv: VersionVector) -> Data

    /**
     * Export the current state and history of the document.
     */
    func exportSnapshot() -> Data

    /**
     * Duplicate the document with a different PeerID
     *
     * The time complexity and space complexity of this operation are both O(n),
     */
    func fork() -> LoroDoc

    /**
     * Convert `Frontiers` into `VersionVector`
     */
    func frontiersToVv(frontiers: Frontiers) -> VersionVector?

    /**
     * Get the handler by the path.
     */
    func getByPath(path: [Index]) -> ValueOrContainer?

    /**
     * Get the handler by the string path.
     */
    func getByStrPath(path: String) -> ValueOrContainer?

    /**
     * Get a [LoroCounter] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    func getCounter(id: ContainerIdLike) -> LoroCounter

    /**
     * Get the current state of the document.
     */
    func getDeepValue() -> LoroValue

    /**
     * Get a [LoroList] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    func getList(id: ContainerIdLike) -> LoroList

    /**
     * Get a [LoroMap] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    func getMap(id: ContainerIdLike) -> LoroMap

    /**
     * Get a [LoroMovableList] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    func getMovableList(id: ContainerIdLike) -> LoroMovableList

    /**
     * Get a [LoroText] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    func getText(id: ContainerIdLike) -> LoroText

    /**
     * Get a [LoroTree] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    func getTree(id: ContainerIdLike) -> LoroTree

    /**
     * Import updates/snapshot exported by [`LoroDoc::export_snapshot`] or [`LoroDoc::export_from`].
     */
    func `import`(bytes: Data) throws

    /**
     * Import a batch of updates/snapshot.
     *
     * The data can be in arbitrary order. The import result will be the same.
     */
    func importBatch(bytes: [Data]) throws

    /**
     * Import updates/snapshot exported by [`LoroDoc::export_snapshot`] or [`LoroDoc::export_from`].
     *
     * It marks the import with a custom `origin` string. It can be used to track the import source
     * in the generated events.
     */
    func importWith(bytes: Data, origin: String) throws

    /**
     * Whether the document is in detached mode, where the [loro_internal::DocState] is not
     * synchronized with the latest version of the [loro_internal::OpLog].
     */
    func isDetached() -> Bool

    /**
     * Get the total number of changes in the `OpLog`
     */
    func lenChanges() -> UInt64

    /**
     * Get the total number of operations in the `OpLog`
     */
    func lenOps() -> UInt64

    /**
     * Get the `Frontiers` version of `OpLog`
     */
    func oplogFrontiers() -> Frontiers

    /**
     * Get the `VersionVector` version of `OpLog`
     */
    func oplogVv() -> VersionVector

    /**
     * Get the PeerID
     */
    func peerId() -> UInt64

    /**
     * Set the interval of mergeable changes, in milliseconds.
     *
     * If two continuous local changes are within the interval, they will be merged into one change.
     * The default value is 1000 seconds.
     */
    func setChangeMergeInterval(interval: Int64)

    /**
     * Set the jitter of the tree position(Fractional Index).
     *
     * The jitter is used to avoid conflicts when multiple users are creating the node at the same position.
     * value 0 is default, which means no jitter, any value larger than 0 will enable jitter.
     * Generally speaking, jitter will affect the growth rate of document size.
     */
    func setFractionalIndexJitter(jitter: UInt8)

    /**
     * Change the PeerID
     *
     * NOTE: You need ot make sure there is no chance two peer have the same PeerID.
     * If it happens, the document will be corrupted.
     */
    func setPeerId(peer: UInt64) throws

    /**
     * Set whether to record the timestamp of each change. Default is `false`.
     *
     * If enabled, the Unix timestamp will be recorded for each change automatically.
     *
     * You can set each timestamp manually when committing a change.
     *
     * NOTE: Timestamps are forced to be in ascending order.
     * If you commit a new change with a timestamp that is less than the existing one,
     * the largest existing timestamp will be used instead.
     */
    func setRecordTimestamp(record: Bool)

    /**
     * Get the `Frontiers` version of `DocState`
     *
     * [Learn more about `Frontiers`]()
     */
    func stateFrontiers() -> Frontiers

    /**
     * Get the `VersionVector` version of `OpLog`
     */
    func stateVv() -> VersionVector

    /**
     * Subscribe the events of a container.
     *
     * The callback will be invoked when the container is changed.
     * Returns a subscription id that can be used to unsubscribe.
     */
    func subscribe(containerId: ContainerId, subscriber: Subscriber) -> SubId

    /**
     * Subscribe all the events.
     *
     * The callback will be invoked when any part of the [loro_internal::DocState] is changed.
     * Returns a subscription id that can be used to unsubscribe.
     */
    func subscribeRoot(subscriber: Subscriber) -> SubId

    /**
     * Remove a subscription.
     */
    func unsubscribe(subId: SubId)

    /**
     * Convert `VersionVector` into `Frontiers`
     */
    func vvToFrontiers(vv: VersionVector) -> Frontiers
}

open class LoroDoc:
    LoroDocProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorodoc(self.pointer, $0) }
    }

    /**
     * Create a new `LoroDoc` instance.
     */
    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_loro_fn_constructor_lorodoc_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorodoc(pointer, $0) }
    }

    /**
     * Attach the document state to the latest known version.
     *
     * > The document becomes detached during a `checkout` operation.
     * > Being `detached` implies that the `DocState` is not synchronized with the latest version of the `OpLog`.
     * > In a detached state, the document is not editable, and any `import` operations will be
     * > recorded in the `OpLog` without being applied to the `DocState`.
     */
    open func attach() { try! rustCall {
        uniffi_loro_fn_method_lorodoc_attach(self.uniffiClonePointer(), $0)
    }
    }

    /**
     * Checkout the `DocState` to a specific version.
     *
     * > The document becomes detached during a `checkout` operation.
     * > Being `detached` implies that the `DocState` is not synchronized with the latest version of the `OpLog`.
     * > In a detached state, the document is not editable, and any `import` operations will be
     * > recorded in the `OpLog` without being applied to the `DocState`.
     *
     * You should call `attach` to attach the `DocState` to the latest version of `OpLog`.
     */
    open func checkout(frontiers: Frontiers) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorodoc_checkout(self.uniffiClonePointer(),
                                               FfiConverterTypeFrontiers.lower(frontiers), $0)
    }
    }

    /**
     * Checkout the `DocState` to the latest version.
     *
     * > The document becomes detached during a `checkout` operation.
     * > Being `detached` implies that the `DocState` is not synchronized with the latest version of the `OpLog`.
     * > In a detached state, the document is not editable, and any `import` operations will be
     * > recorded in the `OpLog` without being applied to the `DocState`.
     *
     * This has the same effect as `attach`.
     */
    open func checkoutToLatest() { try! rustCall {
        uniffi_loro_fn_method_lorodoc_checkout_to_latest(self.uniffiClonePointer(), $0)
    }
    }

    /**
     * Commit the cumulative auto commit transaction.
     *
     * There is a transaction behind every operation.
     * It will automatically commit when users invoke export or import.
     * The event will be sent after a transaction is committed
     */
    open func commit() { try! rustCall {
        uniffi_loro_fn_method_lorodoc_commit(self.uniffiClonePointer(), $0)
    }
    }

    /**
     * Force the document enter the detached mode.
     *
     * In this mode, when you importing new updates, the [loro_internal::DocState] will not be changed.
     *
     * Learn more at https://loro.dev/docs/advanced/doc_state_and_oplog#attacheddetached-status
     */
    open func detach() { try! rustCall {
        uniffi_loro_fn_method_lorodoc_detach(self.uniffiClonePointer(), $0)
    }
    }

    /**
     * Export all the ops not included in the given `VersionVector`
     */
    open func exportFrom(vv: VersionVector) -> Data {
        return try! FfiConverterData.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_export_from(self.uniffiClonePointer(),
                                                      FfiConverterTypeVersionVector.lower(vv), $0)
        })
    }

    /**
     * Export the current state and history of the document.
     */
    open func exportSnapshot() -> Data {
        return try! FfiConverterData.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_export_snapshot(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Duplicate the document with a different PeerID
     *
     * The time complexity and space complexity of this operation are both O(n),
     */
    open func fork() -> LoroDoc {
        return try! FfiConverterTypeLoroDoc.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_fork(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Convert `Frontiers` into `VersionVector`
     */
    open func frontiersToVv(frontiers: Frontiers) -> VersionVector? {
        return try! FfiConverterOptionTypeVersionVector.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_frontiers_to_vv(self.uniffiClonePointer(),
                                                          FfiConverterTypeFrontiers.lower(frontiers), $0)
        })
    }

    /**
     * Get the handler by the path.
     */
    open func getByPath(path: [Index]) -> ValueOrContainer? {
        return try! FfiConverterOptionTypeValueOrContainer.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_get_by_path(self.uniffiClonePointer(),
                                                      FfiConverterSequenceTypeIndex.lower(path), $0)
        })
    }

    /**
     * Get the handler by the string path.
     */
    open func getByStrPath(path: String) -> ValueOrContainer? {
        return try! FfiConverterOptionTypeValueOrContainer.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_get_by_str_path(self.uniffiClonePointer(),
                                                          FfiConverterString.lower(path), $0)
        })
    }

    /**
     * Get a [LoroCounter] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    open func getCounter(id: ContainerIdLike) -> LoroCounter {
        return try! FfiConverterTypeLoroCounter.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_get_counter(self.uniffiClonePointer(),
                                                      FfiConverterTypeContainerIdLike.lower(id), $0)
        })
    }

    /**
     * Get the current state of the document.
     */
    open func getDeepValue() -> LoroValue {
        return try! FfiConverterTypeLoroValue.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_get_deep_value(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get a [LoroList] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    open func getList(id: ContainerIdLike) -> LoroList {
        return try! FfiConverterTypeLoroList.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_get_list(self.uniffiClonePointer(),
                                                   FfiConverterTypeContainerIdLike.lower(id), $0)
        })
    }

    /**
     * Get a [LoroMap] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    open func getMap(id: ContainerIdLike) -> LoroMap {
        return try! FfiConverterTypeLoroMap.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_get_map(self.uniffiClonePointer(),
                                                  FfiConverterTypeContainerIdLike.lower(id), $0)
        })
    }

    /**
     * Get a [LoroMovableList] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    open func getMovableList(id: ContainerIdLike) -> LoroMovableList {
        return try! FfiConverterTypeLoroMovableList.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_get_movable_list(self.uniffiClonePointer(),
                                                           FfiConverterTypeContainerIdLike.lower(id), $0)
        })
    }

    /**
     * Get a [LoroText] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    open func getText(id: ContainerIdLike) -> LoroText {
        return try! FfiConverterTypeLoroText.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_get_text(self.uniffiClonePointer(),
                                                   FfiConverterTypeContainerIdLike.lower(id), $0)
        })
    }

    /**
     * Get a [LoroTree] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    open func getTree(id: ContainerIdLike) -> LoroTree {
        return try! FfiConverterTypeLoroTree.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_get_tree(self.uniffiClonePointer(),
                                                   FfiConverterTypeContainerIdLike.lower(id), $0)
        })
    }

    /**
     * Import updates/snapshot exported by [`LoroDoc::export_snapshot`] or [`LoroDoc::export_from`].
     */
    open func `import`(bytes: Data) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorodoc_import(self.uniffiClonePointer(),
                                             FfiConverterData.lower(bytes), $0)
    }
    }

    /**
     * Import a batch of updates/snapshot.
     *
     * The data can be in arbitrary order. The import result will be the same.
     */
    open func importBatch(bytes: [Data]) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorodoc_import_batch(self.uniffiClonePointer(),
                                                   FfiConverterSequenceData.lower(bytes), $0)
    }
    }

    /**
     * Import updates/snapshot exported by [`LoroDoc::export_snapshot`] or [`LoroDoc::export_from`].
     *
     * It marks the import with a custom `origin` string. It can be used to track the import source
     * in the generated events.
     */
    open func importWith(bytes: Data, origin: String) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorodoc_import_with(self.uniffiClonePointer(),
                                                  FfiConverterData.lower(bytes),
                                                  FfiConverterString.lower(origin), $0)
    }
    }

    /**
     * Whether the document is in detached mode, where the [loro_internal::DocState] is not
     * synchronized with the latest version of the [loro_internal::OpLog].
     */
    open func isDetached() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_is_detached(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the total number of changes in the `OpLog`
     */
    open func lenChanges() -> UInt64 {
        return try! FfiConverterUInt64.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_len_changes(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the total number of operations in the `OpLog`
     */
    open func lenOps() -> UInt64 {
        return try! FfiConverterUInt64.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_len_ops(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the `Frontiers` version of `OpLog`
     */
    open func oplogFrontiers() -> Frontiers {
        return try! FfiConverterTypeFrontiers.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_oplog_frontiers(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the `VersionVector` version of `OpLog`
     */
    open func oplogVv() -> VersionVector {
        return try! FfiConverterTypeVersionVector.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_oplog_vv(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the PeerID
     */
    open func peerId() -> UInt64 {
        return try! FfiConverterUInt64.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_peer_id(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Set the interval of mergeable changes, in milliseconds.
     *
     * If two continuous local changes are within the interval, they will be merged into one change.
     * The default value is 1000 seconds.
     */
    open func setChangeMergeInterval(interval: Int64) { try! rustCall {
        uniffi_loro_fn_method_lorodoc_set_change_merge_interval(self.uniffiClonePointer(),
                                                                FfiConverterInt64.lower(interval), $0)
    }
    }

    /**
     * Set the jitter of the tree position(Fractional Index).
     *
     * The jitter is used to avoid conflicts when multiple users are creating the node at the same position.
     * value 0 is default, which means no jitter, any value larger than 0 will enable jitter.
     * Generally speaking, jitter will affect the growth rate of document size.
     */
    open func setFractionalIndexJitter(jitter: UInt8) { try! rustCall {
        uniffi_loro_fn_method_lorodoc_set_fractional_index_jitter(self.uniffiClonePointer(),
                                                                  FfiConverterUInt8.lower(jitter), $0)
    }
    }

    /**
     * Change the PeerID
     *
     * NOTE: You need ot make sure there is no chance two peer have the same PeerID.
     * If it happens, the document will be corrupted.
     */
    open func setPeerId(peer: UInt64) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorodoc_set_peer_id(self.uniffiClonePointer(),
                                                  FfiConverterUInt64.lower(peer), $0)
    }
    }

    /**
     * Set whether to record the timestamp of each change. Default is `false`.
     *
     * If enabled, the Unix timestamp will be recorded for each change automatically.
     *
     * You can set each timestamp manually when committing a change.
     *
     * NOTE: Timestamps are forced to be in ascending order.
     * If you commit a new change with a timestamp that is less than the existing one,
     * the largest existing timestamp will be used instead.
     */
    open func setRecordTimestamp(record: Bool) { try! rustCall {
        uniffi_loro_fn_method_lorodoc_set_record_timestamp(self.uniffiClonePointer(),
                                                           FfiConverterBool.lower(record), $0)
    }
    }

    /**
     * Get the `Frontiers` version of `DocState`
     *
     * [Learn more about `Frontiers`]()
     */
    open func stateFrontiers() -> Frontiers {
        return try! FfiConverterTypeFrontiers.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_state_frontiers(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the `VersionVector` version of `OpLog`
     */
    open func stateVv() -> VersionVector {
        return try! FfiConverterTypeVersionVector.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_state_vv(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Subscribe the events of a container.
     *
     * The callback will be invoked when the container is changed.
     * Returns a subscription id that can be used to unsubscribe.
     */
    open func subscribe(containerId: ContainerId, subscriber: Subscriber) -> SubId {
        return try! FfiConverterTypeSubID.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_subscribe(self.uniffiClonePointer(),
                                                    FfiConverterTypeContainerID.lower(containerId),
                                                    FfiConverterTypeSubscriber.lower(subscriber), $0)
        })
    }

    /**
     * Subscribe all the events.
     *
     * The callback will be invoked when any part of the [loro_internal::DocState] is changed.
     * Returns a subscription id that can be used to unsubscribe.
     */
    open func subscribeRoot(subscriber: Subscriber) -> SubId {
        return try! FfiConverterTypeSubID.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_subscribe_root(self.uniffiClonePointer(),
                                                         FfiConverterTypeSubscriber.lower(subscriber), $0)
        })
    }

    /**
     * Remove a subscription.
     */
    open func unsubscribe(subId: SubId) { try! rustCall {
        uniffi_loro_fn_method_lorodoc_unsubscribe(self.uniffiClonePointer(),
                                                  FfiConverterTypeSubID.lower(subId), $0)
    }
    }

    /**
     * Convert `VersionVector` into `Frontiers`
     */
    open func vvToFrontiers(vv: VersionVector) -> Frontiers {
        return try! FfiConverterTypeFrontiers.lift(try! rustCall {
            uniffi_loro_fn_method_lorodoc_vv_to_frontiers(self.uniffiClonePointer(),
                                                          FfiConverterTypeVersionVector.lower(vv), $0)
        })
    }
}

public struct FfiConverterTypeLoroDoc: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroDoc

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroDoc {
        return LoroDoc(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroDoc) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroDoc {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroDoc, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeLoroDoc_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroDoc {
    return try FfiConverterTypeLoroDoc.lift(pointer)
}

public func FfiConverterTypeLoroDoc_lower(_ value: LoroDoc) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroDoc.lower(value)
}

public protocol LoroListProtocol: AnyObject {
    /**
     * Delete values at the given position.
     */
    func delete(pos: UInt32, len: UInt32) throws

    /**
     * Get the value at the given position.
     */
    func get(index: UInt32) -> ValueOrContainer?

    func getCursor(pos: UInt32, side: Side) -> Cursor?

    /**
     * Get the deep value of the container.
     */
    func getDeepValue() -> LoroValue

    /**
     * Get the shallow value of the container.
     *
     * This does not convert the state of sub-containers; instead, it represents them as [LoroValue::Container].
     */
    func getValue() -> LoroValue

    /**
     * Get the ID of the container.
     */
    func id() -> ContainerId

    /**
     * Insert a value at the given position.
     */
    func insert(pos: UInt32, v: LoroValueLike) throws

    func insertCounterContainer(pos: UInt32, child: LoroCounter) throws -> LoroCounter

    func insertListContainer(pos: UInt32, child: LoroList) throws -> LoroList

    func insertMapContainer(pos: UInt32, child: LoroMap) throws -> LoroMap

    func insertMovableListContainer(pos: UInt32, child: LoroMovableList) throws -> LoroMovableList

    func insertTextContainer(pos: UInt32, child: LoroText) throws -> LoroText

    func insertTreeContainer(pos: UInt32, child: LoroTree) throws -> LoroTree

    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    func isAttached() -> Bool

    func isEmpty() -> Bool

    func len() -> UInt32

    /**
     * Pop the last element of the list.
     */
    func pop() throws -> LoroValue?

    func push(v: LoroValueLike) throws
}

open class LoroList:
    LoroListProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorolist(self.pointer, $0) }
    }

    /**
     * Create a new container that is detached from the document.
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_loro_fn_constructor_lorolist_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorolist(pointer, $0) }
    }

    /**
     * Delete values at the given position.
     */
    open func delete(pos: UInt32, len: UInt32) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorolist_delete(self.uniffiClonePointer(),
                                              FfiConverterUInt32.lower(pos),
                                              FfiConverterUInt32.lower(len), $0)
    }
    }

    /**
     * Get the value at the given position.
     */
    open func get(index: UInt32) -> ValueOrContainer? {
        return try! FfiConverterOptionTypeValueOrContainer.lift(try! rustCall {
            uniffi_loro_fn_method_lorolist_get(self.uniffiClonePointer(),
                                               FfiConverterUInt32.lower(index), $0)
        })
    }

    open func getCursor(pos: UInt32, side: Side) -> Cursor? {
        return try! FfiConverterOptionTypeCursor.lift(try! rustCall {
            uniffi_loro_fn_method_lorolist_get_cursor(self.uniffiClonePointer(),
                                                      FfiConverterUInt32.lower(pos),
                                                      FfiConverterTypeSide.lower(side), $0)
        })
    }

    /**
     * Get the deep value of the container.
     */
    open func getDeepValue() -> LoroValue {
        return try! FfiConverterTypeLoroValue.lift(try! rustCall {
            uniffi_loro_fn_method_lorolist_get_deep_value(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the shallow value of the container.
     *
     * This does not convert the state of sub-containers; instead, it represents them as [LoroValue::Container].
     */
    open func getValue() -> LoroValue {
        return try! FfiConverterTypeLoroValue.lift(try! rustCall {
            uniffi_loro_fn_method_lorolist_get_value(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the ID of the container.
     */
    open func id() -> ContainerId {
        return try! FfiConverterTypeContainerID.lift(try! rustCall {
            uniffi_loro_fn_method_lorolist_id(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Insert a value at the given position.
     */
    open func insert(pos: UInt32, v: LoroValueLike) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorolist_insert(self.uniffiClonePointer(),
                                              FfiConverterUInt32.lower(pos),
                                              FfiConverterTypeLoroValueLike.lower(v), $0)
    }
    }

    open func insertCounterContainer(pos: UInt32, child: LoroCounter) throws -> LoroCounter {
        return try FfiConverterTypeLoroCounter.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorolist_insert_counter_container(self.uniffiClonePointer(),
                                                                    FfiConverterUInt32.lower(pos),
                                                                    FfiConverterTypeLoroCounter.lower(child), $0)
        })
    }

    open func insertListContainer(pos: UInt32, child: LoroList) throws -> LoroList {
        return try FfiConverterTypeLoroList.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorolist_insert_list_container(self.uniffiClonePointer(),
                                                                 FfiConverterUInt32.lower(pos),
                                                                 FfiConverterTypeLoroList.lower(child), $0)
        })
    }

    open func insertMapContainer(pos: UInt32, child: LoroMap) throws -> LoroMap {
        return try FfiConverterTypeLoroMap.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorolist_insert_map_container(self.uniffiClonePointer(),
                                                                FfiConverterUInt32.lower(pos),
                                                                FfiConverterTypeLoroMap.lower(child), $0)
        })
    }

    open func insertMovableListContainer(pos: UInt32, child: LoroMovableList) throws -> LoroMovableList {
        return try FfiConverterTypeLoroMovableList.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorolist_insert_movable_list_container(self.uniffiClonePointer(),
                                                                         FfiConverterUInt32.lower(pos),
                                                                         FfiConverterTypeLoroMovableList.lower(child), $0)
        })
    }

    open func insertTextContainer(pos: UInt32, child: LoroText) throws -> LoroText {
        return try FfiConverterTypeLoroText.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorolist_insert_text_container(self.uniffiClonePointer(),
                                                                 FfiConverterUInt32.lower(pos),
                                                                 FfiConverterTypeLoroText.lower(child), $0)
        })
    }

    open func insertTreeContainer(pos: UInt32, child: LoroTree) throws -> LoroTree {
        return try FfiConverterTypeLoroTree.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorolist_insert_tree_container(self.uniffiClonePointer(),
                                                                 FfiConverterUInt32.lower(pos),
                                                                 FfiConverterTypeLoroTree.lower(child), $0)
        })
    }

    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    open func isAttached() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_lorolist_is_attached(self.uniffiClonePointer(), $0)
        })
    }

    open func isEmpty() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_lorolist_is_empty(self.uniffiClonePointer(), $0)
        })
    }

    open func len() -> UInt32 {
        return try! FfiConverterUInt32.lift(try! rustCall {
            uniffi_loro_fn_method_lorolist_len(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Pop the last element of the list.
     */
    open func pop() throws -> LoroValue? {
        return try FfiConverterOptionTypeLoroValue.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorolist_pop(self.uniffiClonePointer(), $0)
        })
    }

    open func push(v: LoroValueLike) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorolist_push(self.uniffiClonePointer(),
                                            FfiConverterTypeLoroValueLike.lower(v), $0)
    }
    }
}

public struct FfiConverterTypeLoroList: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroList

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroList {
        return LoroList(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroList) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroList {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroList, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeLoroList_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroList {
    return try FfiConverterTypeLoroList.lift(pointer)
}

public func FfiConverterTypeLoroList_lower(_ value: LoroList) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroList.lower(value)
}

public protocol LoroMapProtocol: AnyObject {
    /**
     * Delete a key-value pair from the map.
     */
    func delete(key: String) throws

    /**
     * Get the value of the map with the given key.
     */
    func get(key: String) -> ValueOrContainer?

    /**
     * Get the deep value of the map.
     *
     * It will convert the state of sub-containers into a nested JSON value.
     */
    func getDeepValue() -> LoroValue

    /**
     * Get the shallow value of the map.
     *
     * It will not convert the state of sub-containers, but represent them as [LoroValue::Container].
     */
    func getValue() -> LoroValue

    /**
     * Get the ID of the map.
     */
    func id() -> ContainerId

    /**
     * Insert a key-value pair into the map.
     */
    func insert(key: String, v: LoroValueLike) throws

    func insertCounterContainer(key: String, child: LoroCounter) throws -> LoroCounter

    func insertListContainer(key: String, child: LoroList) throws -> LoroList

    func insertMapContainer(key: String, child: LoroMap) throws -> LoroMap

    func insertMovableListContainer(key: String, child: LoroMovableList) throws -> LoroMovableList

    func insertTextContainer(key: String, child: LoroText) throws -> LoroText

    func insertTreeContainer(key: String, child: LoroTree) throws -> LoroTree

    /**
     * Whether the container is attached to a document.
     */
    func isAttached() -> Bool

    /**
     * Whether the map is empty.
     */
    func isEmpty() -> Bool

    /**
     * Get the length of the map.
     */
    func len() -> UInt32
}

open class LoroMap:
    LoroMapProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_loromap(self.pointer, $0) }
    }

    /**
     * Create a new container that is detached from the document.
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_loro_fn_constructor_loromap_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_loromap(pointer, $0) }
    }

    /**
     * Delete a key-value pair from the map.
     */
    open func delete(key: String) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_loromap_delete(self.uniffiClonePointer(),
                                             FfiConverterString.lower(key), $0)
    }
    }

    /**
     * Get the value of the map with the given key.
     */
    open func get(key: String) -> ValueOrContainer? {
        return try! FfiConverterOptionTypeValueOrContainer.lift(try! rustCall {
            uniffi_loro_fn_method_loromap_get(self.uniffiClonePointer(),
                                              FfiConverterString.lower(key), $0)
        })
    }

    /**
     * Get the deep value of the map.
     *
     * It will convert the state of sub-containers into a nested JSON value.
     */
    open func getDeepValue() -> LoroValue {
        return try! FfiConverterTypeLoroValue.lift(try! rustCall {
            uniffi_loro_fn_method_loromap_get_deep_value(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the shallow value of the map.
     *
     * It will not convert the state of sub-containers, but represent them as [LoroValue::Container].
     */
    open func getValue() -> LoroValue {
        return try! FfiConverterTypeLoroValue.lift(try! rustCall {
            uniffi_loro_fn_method_loromap_get_value(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the ID of the map.
     */
    open func id() -> ContainerId {
        return try! FfiConverterTypeContainerID.lift(try! rustCall {
            uniffi_loro_fn_method_loromap_id(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Insert a key-value pair into the map.
     */
    open func insert(key: String, v: LoroValueLike) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_loromap_insert(self.uniffiClonePointer(),
                                             FfiConverterString.lower(key),
                                             FfiConverterTypeLoroValueLike.lower(v), $0)
    }
    }

    open func insertCounterContainer(key: String, child: LoroCounter) throws -> LoroCounter {
        return try FfiConverterTypeLoroCounter.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromap_insert_counter_container(self.uniffiClonePointer(),
                                                                   FfiConverterString.lower(key),
                                                                   FfiConverterTypeLoroCounter.lower(child), $0)
        })
    }

    open func insertListContainer(key: String, child: LoroList) throws -> LoroList {
        return try FfiConverterTypeLoroList.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromap_insert_list_container(self.uniffiClonePointer(),
                                                                FfiConverterString.lower(key),
                                                                FfiConverterTypeLoroList.lower(child), $0)
        })
    }

    open func insertMapContainer(key: String, child: LoroMap) throws -> LoroMap {
        return try FfiConverterTypeLoroMap.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromap_insert_map_container(self.uniffiClonePointer(),
                                                               FfiConverterString.lower(key),
                                                               FfiConverterTypeLoroMap.lower(child), $0)
        })
    }

    open func insertMovableListContainer(key: String, child: LoroMovableList) throws -> LoroMovableList {
        return try FfiConverterTypeLoroMovableList.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromap_insert_movable_list_container(self.uniffiClonePointer(),
                                                                        FfiConverterString.lower(key),
                                                                        FfiConverterTypeLoroMovableList.lower(child), $0)
        })
    }

    open func insertTextContainer(key: String, child: LoroText) throws -> LoroText {
        return try FfiConverterTypeLoroText.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromap_insert_text_container(self.uniffiClonePointer(),
                                                                FfiConverterString.lower(key),
                                                                FfiConverterTypeLoroText.lower(child), $0)
        })
    }

    open func insertTreeContainer(key: String, child: LoroTree) throws -> LoroTree {
        return try FfiConverterTypeLoroTree.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromap_insert_tree_container(self.uniffiClonePointer(),
                                                                FfiConverterString.lower(key),
                                                                FfiConverterTypeLoroTree.lower(child), $0)
        })
    }

    /**
     * Whether the container is attached to a document.
     */
    open func isAttached() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_loromap_is_attached(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Whether the map is empty.
     */
    open func isEmpty() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_loromap_is_empty(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the length of the map.
     */
    open func len() -> UInt32 {
        return try! FfiConverterUInt32.lift(try! rustCall {
            uniffi_loro_fn_method_loromap_len(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeLoroMap: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroMap

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroMap {
        return LoroMap(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroMap) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroMap {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroMap, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeLoroMap_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroMap {
    return try FfiConverterTypeLoroMap.lift(pointer)
}

public func FfiConverterTypeLoroMap_lower(_ value: LoroMap) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroMap.lower(value)
}

public protocol LoroMovableListProtocol: AnyObject {
    /**
     * Delete values at the given position.
     */
    func delete(pos: UInt32, len: UInt32) throws

    /**
     * Get the value at the given position.
     */
    func get(index: UInt32) -> ValueOrContainer?

    /**
     * Get the cursor at the given position.
     *
     * Using "index" to denote cursor positions can be unstable, as positions may
     * shift with document edits. To reliably represent a position or range within
     * a document, it is more effective to leverage the unique ID of each item/character
     * in a List CRDT or Text CRDT.
     *
     * Loro optimizes State metadata by not storing the IDs of deleted elements. This
     * approach complicates tracking cursors since they rely on these IDs. The solution
     * recalculates position by replaying relevant history to update stable positions
     * accurately. To minimize the performance impact of history replay, the system
     * updates cursor info to reference only the IDs of currently present elements,
     * thereby reducing the need for replay.
     */
    func getCursor(pos: UInt32, side: Side) -> Cursor?

    /**
     * Get the deep value of the container.
     */
    func getDeepValue() -> LoroValue

    /**
     * Get the shallow value of the container.
     *
     * This does not convert the state of sub-containers; instead, it represents them as [LoroValue::Container].
     */
    func getValue() -> LoroValue

    /**
     * Get the container id.
     */
    func id() -> ContainerId

    /**
     * Insert a value at the given position.
     */
    func insert(pos: UInt32, v: LoroValueLike) throws

    func insertCounterContainer(pos: UInt32, child: LoroCounter) throws -> LoroCounter

    func insertListContainer(pos: UInt32, child: LoroList) throws -> LoroList

    func insertMapContainer(pos: UInt32, child: LoroMap) throws -> LoroMap

    func insertMovableListContainer(pos: UInt32, child: LoroMovableList) throws -> LoroMovableList

    func insertTextContainer(pos: UInt32, child: LoroText) throws -> LoroText

    func insertTreeContainer(pos: UInt32, child: LoroTree) throws -> LoroTree

    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    func isAttached() -> Bool

    func isEmpty() -> Bool

    func len() -> UInt32

    /**
     * Move the value at the given position to the given position.
     */
    func mov(from: UInt32, to: UInt32) throws

    /**
     * Pop the last element of the list.
     */
    func pop() throws -> ValueOrContainer?

    func push(v: LoroValueLike) throws

    /**
     * Set the value at the given position.
     */
    func set(pos: UInt32, value: LoroValueLike) throws

    func setCounterContainer(pos: UInt32, child: LoroCounter) throws -> LoroCounter

    func setListContainer(pos: UInt32, child: LoroList) throws -> LoroList

    func setMapContainer(pos: UInt32, child: LoroMap) throws -> LoroMap

    func setMovableListContainer(pos: UInt32, child: LoroMovableList) throws -> LoroMovableList

    func setTextContainer(pos: UInt32, child: LoroText) throws -> LoroText

    func setTreeContainer(pos: UInt32, child: LoroTree) throws -> LoroTree
}

open class LoroMovableList:
    LoroMovableListProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_loromovablelist(self.pointer, $0) }
    }

    /**
     * Create a new container that is detached from the document.
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_loro_fn_constructor_loromovablelist_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_loromovablelist(pointer, $0) }
    }

    /**
     * Delete values at the given position.
     */
    open func delete(pos: UInt32, len: UInt32) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_loromovablelist_delete(self.uniffiClonePointer(),
                                                     FfiConverterUInt32.lower(pos),
                                                     FfiConverterUInt32.lower(len), $0)
    }
    }

    /**
     * Get the value at the given position.
     */
    open func get(index: UInt32) -> ValueOrContainer? {
        return try! FfiConverterOptionTypeValueOrContainer.lift(try! rustCall {
            uniffi_loro_fn_method_loromovablelist_get(self.uniffiClonePointer(),
                                                      FfiConverterUInt32.lower(index), $0)
        })
    }

    /**
     * Get the cursor at the given position.
     *
     * Using "index" to denote cursor positions can be unstable, as positions may
     * shift with document edits. To reliably represent a position or range within
     * a document, it is more effective to leverage the unique ID of each item/character
     * in a List CRDT or Text CRDT.
     *
     * Loro optimizes State metadata by not storing the IDs of deleted elements. This
     * approach complicates tracking cursors since they rely on these IDs. The solution
     * recalculates position by replaying relevant history to update stable positions
     * accurately. To minimize the performance impact of history replay, the system
     * updates cursor info to reference only the IDs of currently present elements,
     * thereby reducing the need for replay.
     */
    open func getCursor(pos: UInt32, side: Side) -> Cursor? {
        return try! FfiConverterOptionTypeCursor.lift(try! rustCall {
            uniffi_loro_fn_method_loromovablelist_get_cursor(self.uniffiClonePointer(),
                                                             FfiConverterUInt32.lower(pos),
                                                             FfiConverterTypeSide.lower(side), $0)
        })
    }

    /**
     * Get the deep value of the container.
     */
    open func getDeepValue() -> LoroValue {
        return try! FfiConverterTypeLoroValue.lift(try! rustCall {
            uniffi_loro_fn_method_loromovablelist_get_deep_value(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the shallow value of the container.
     *
     * This does not convert the state of sub-containers; instead, it represents them as [LoroValue::Container].
     */
    open func getValue() -> LoroValue {
        return try! FfiConverterTypeLoroValue.lift(try! rustCall {
            uniffi_loro_fn_method_loromovablelist_get_value(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the container id.
     */
    open func id() -> ContainerId {
        return try! FfiConverterTypeContainerID.lift(try! rustCall {
            uniffi_loro_fn_method_loromovablelist_id(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Insert a value at the given position.
     */
    open func insert(pos: UInt32, v: LoroValueLike) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_loromovablelist_insert(self.uniffiClonePointer(),
                                                     FfiConverterUInt32.lower(pos),
                                                     FfiConverterTypeLoroValueLike.lower(v), $0)
    }
    }

    open func insertCounterContainer(pos: UInt32, child: LoroCounter) throws -> LoroCounter {
        return try FfiConverterTypeLoroCounter.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_insert_counter_container(self.uniffiClonePointer(),
                                                                           FfiConverterUInt32.lower(pos),
                                                                           FfiConverterTypeLoroCounter.lower(child), $0)
        })
    }

    open func insertListContainer(pos: UInt32, child: LoroList) throws -> LoroList {
        return try FfiConverterTypeLoroList.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_insert_list_container(self.uniffiClonePointer(),
                                                                        FfiConverterUInt32.lower(pos),
                                                                        FfiConverterTypeLoroList.lower(child), $0)
        })
    }

    open func insertMapContainer(pos: UInt32, child: LoroMap) throws -> LoroMap {
        return try FfiConverterTypeLoroMap.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_insert_map_container(self.uniffiClonePointer(),
                                                                       FfiConverterUInt32.lower(pos),
                                                                       FfiConverterTypeLoroMap.lower(child), $0)
        })
    }

    open func insertMovableListContainer(pos: UInt32, child: LoroMovableList) throws -> LoroMovableList {
        return try FfiConverterTypeLoroMovableList.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_insert_movable_list_container(self.uniffiClonePointer(),
                                                                                FfiConverterUInt32.lower(pos),
                                                                                FfiConverterTypeLoroMovableList.lower(child), $0)
        })
    }

    open func insertTextContainer(pos: UInt32, child: LoroText) throws -> LoroText {
        return try FfiConverterTypeLoroText.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_insert_text_container(self.uniffiClonePointer(),
                                                                        FfiConverterUInt32.lower(pos),
                                                                        FfiConverterTypeLoroText.lower(child), $0)
        })
    }

    open func insertTreeContainer(pos: UInt32, child: LoroTree) throws -> LoroTree {
        return try FfiConverterTypeLoroTree.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_insert_tree_container(self.uniffiClonePointer(),
                                                                        FfiConverterUInt32.lower(pos),
                                                                        FfiConverterTypeLoroTree.lower(child), $0)
        })
    }

    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    open func isAttached() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_loromovablelist_is_attached(self.uniffiClonePointer(), $0)
        })
    }

    open func isEmpty() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_loromovablelist_is_empty(self.uniffiClonePointer(), $0)
        })
    }

    open func len() -> UInt32 {
        return try! FfiConverterUInt32.lift(try! rustCall {
            uniffi_loro_fn_method_loromovablelist_len(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Move the value at the given position to the given position.
     */
    open func mov(from: UInt32, to: UInt32) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_loromovablelist_mov(self.uniffiClonePointer(),
                                                  FfiConverterUInt32.lower(from),
                                                  FfiConverterUInt32.lower(to), $0)
    }
    }

    /**
     * Pop the last element of the list.
     */
    open func pop() throws -> ValueOrContainer? {
        return try FfiConverterOptionTypeValueOrContainer.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_pop(self.uniffiClonePointer(), $0)
        })
    }

    open func push(v: LoroValueLike) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_loromovablelist_push(self.uniffiClonePointer(),
                                                   FfiConverterTypeLoroValueLike.lower(v), $0)
    }
    }

    /**
     * Set the value at the given position.
     */
    open func set(pos: UInt32, value: LoroValueLike) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_loromovablelist_set(self.uniffiClonePointer(),
                                                  FfiConverterUInt32.lower(pos),
                                                  FfiConverterTypeLoroValueLike.lower(value), $0)
    }
    }

    open func setCounterContainer(pos: UInt32, child: LoroCounter) throws -> LoroCounter {
        return try FfiConverterTypeLoroCounter.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_set_counter_container(self.uniffiClonePointer(),
                                                                        FfiConverterUInt32.lower(pos),
                                                                        FfiConverterTypeLoroCounter.lower(child), $0)
        })
    }

    open func setListContainer(pos: UInt32, child: LoroList) throws -> LoroList {
        return try FfiConverterTypeLoroList.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_set_list_container(self.uniffiClonePointer(),
                                                                     FfiConverterUInt32.lower(pos),
                                                                     FfiConverterTypeLoroList.lower(child), $0)
        })
    }

    open func setMapContainer(pos: UInt32, child: LoroMap) throws -> LoroMap {
        return try FfiConverterTypeLoroMap.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_set_map_container(self.uniffiClonePointer(),
                                                                    FfiConverterUInt32.lower(pos),
                                                                    FfiConverterTypeLoroMap.lower(child), $0)
        })
    }

    open func setMovableListContainer(pos: UInt32, child: LoroMovableList) throws -> LoroMovableList {
        return try FfiConverterTypeLoroMovableList.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_set_movable_list_container(self.uniffiClonePointer(),
                                                                             FfiConverterUInt32.lower(pos),
                                                                             FfiConverterTypeLoroMovableList.lower(child), $0)
        })
    }

    open func setTextContainer(pos: UInt32, child: LoroText) throws -> LoroText {
        return try FfiConverterTypeLoroText.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_set_text_container(self.uniffiClonePointer(),
                                                                     FfiConverterUInt32.lower(pos),
                                                                     FfiConverterTypeLoroText.lower(child), $0)
        })
    }

    open func setTreeContainer(pos: UInt32, child: LoroTree) throws -> LoroTree {
        return try FfiConverterTypeLoroTree.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_loromovablelist_set_tree_container(self.uniffiClonePointer(),
                                                                     FfiConverterUInt32.lower(pos),
                                                                     FfiConverterTypeLoroTree.lower(child), $0)
        })
    }
}

public struct FfiConverterTypeLoroMovableList: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroMovableList

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroMovableList {
        return LoroMovableList(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroMovableList) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroMovableList {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroMovableList, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeLoroMovableList_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroMovableList {
    return try FfiConverterTypeLoroMovableList.lift(pointer)
}

public func FfiConverterTypeLoroMovableList_lower(_ value: LoroMovableList) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroMovableList.lower(value)
}

public protocol LoroTextProtocol: AnyObject {
    /**
     * Delete a range of text at the given unicode position with unicode length.
     */
    func delete(pos: UInt32, len: UInt32) throws

    /**
     * Delete a range of text at the given utf-8 position with utf-8 length.
     */
    func deleteUtf8(pos: UInt32, len: UInt32) throws

    /**
     * Get the cursor at the given position.
     *
     * Using "index" to denote cursor positions can be unstable, as positions may
     * shift with document edits. To reliably represent a position or range within
     * a document, it is more effective to leverage the unique ID of each item/character
     * in a List CRDT or Text CRDT.
     *
     * Loro optimizes State metadata by not storing the IDs of deleted elements. This
     * approach complicates tracking cursors since they rely on these IDs. The solution
     * recalculates position by replaying relevant history to update stable positions
     * accurately. To minimize the performance impact of history replay, the system
     * updates cursor info to reference only the IDs of currently present elements,
     * thereby reducing the need for replay.
     */
    func getCursor(pos: UInt32, side: Side) -> Cursor?

    /**
     * Get the [ContainerID]  of the text container.
     */
    func id() -> ContainerId

    /**
     * Insert a string at the given unicode position.
     */
    func insert(pos: UInt32, s: String) throws

    /**
     * Insert a string at the given utf-8 position.
     */
    func insertUtf8(pos: UInt32, s: String) throws

    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    func isAttached() -> Bool

    /**
     * Whether the text container is empty.
     */
    func isEmpty() -> Bool

    /**
     * Get the length of the text container in Unicode.
     */
    func lenUnicode() -> UInt32

    /**
     * Get the length of the text container in UTF-16.
     */
    func lenUtf16() -> UInt32

    /**
     * Get the length of the text container in UTF-8.
     */
    func lenUtf8() -> UInt32

    /**
     * Mark a range of text with a key-value pair.
     *
     * You can use it to create a highlight, make a range of text bold, or add a link to a range of text.
     *
     * You can specify the `expand` option to set the behavior when inserting text at the boundary of the range.
     *
     * - `after`(default): when inserting text right after the given range, the mark will be expanded to include the inserted text
     * - `before`: when inserting text right before the given range, the mark will be expanded to include the inserted text
     * - `none`: the mark will not be expanded to include the inserted text at the boundaries
     * - `both`: when inserting text either right before or right after the given range, the mark will be expanded to include the inserted text
     *
     * *You should make sure that a key is always associated with the same expand type.*
     *
     * Note: this is not suitable for unmergeable annotations like comments.
     */
    func mark(from: UInt32, to: UInt32, key: String, value: LoroValueLike) throws

    /**
     * Get a string slice at the given Unicode range
     */
    func slice(startIndex: UInt32, endIndex: UInt32) throws -> String

    /**
     * Delete specified character and insert string at the same position at given unicode position.
     */
    func splice(pos: UInt32, len: UInt32, s: String) throws -> String

    /**
     * Get the text in [Delta](https://quilljs.com/docs/delta/) format.
     */
    func toDelta() -> LoroValue

    /**
     * Get the text content of the text container.
     */
    func toString() -> String

    /**
     * Unmark a range of text with a key and a value.
     *
     * You can use it to remove highlights, bolds or links
     *
     * You can specify the `expand` option to set the behavior when inserting text at the boundary of the range.
     *
     * **Note: You should specify the same expand type as when you mark the text.**
     *
     * - `after`(default): when inserting text right after the given range, the mark will be expanded to include the inserted text
     * - `before`: when inserting text right before the given range, the mark will be expanded to include the inserted text
     * - `none`: the mark will not be expanded to include the inserted text at the boundaries
     * - `both`: when inserting text either right before or right after the given range, the mark will be expanded to include the inserted text
     *
     * *You should make sure that a key is always associated with the same expand type.*
     *
     * Note: you cannot delete unmergeable annotations like comments by this method.
     */
    func unmark(from: UInt32, to: UInt32, key: String) throws

    /**
     * Update the current text based on the provided text.
     */
    func update(s: String)
}

open class LoroText:
    LoroTextProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorotext(self.pointer, $0) }
    }

    /**
     * Create a new container that is detached from the document.
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_loro_fn_constructor_lorotext_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorotext(pointer, $0) }
    }

    /**
     * Delete a range of text at the given unicode position with unicode length.
     */
    open func delete(pos: UInt32, len: UInt32) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorotext_delete(self.uniffiClonePointer(),
                                              FfiConverterUInt32.lower(pos),
                                              FfiConverterUInt32.lower(len), $0)
    }
    }

    /**
     * Delete a range of text at the given utf-8 position with utf-8 length.
     */
    open func deleteUtf8(pos: UInt32, len: UInt32) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorotext_delete_utf8(self.uniffiClonePointer(),
                                                   FfiConverterUInt32.lower(pos),
                                                   FfiConverterUInt32.lower(len), $0)
    }
    }

    /**
     * Get the cursor at the given position.
     *
     * Using "index" to denote cursor positions can be unstable, as positions may
     * shift with document edits. To reliably represent a position or range within
     * a document, it is more effective to leverage the unique ID of each item/character
     * in a List CRDT or Text CRDT.
     *
     * Loro optimizes State metadata by not storing the IDs of deleted elements. This
     * approach complicates tracking cursors since they rely on these IDs. The solution
     * recalculates position by replaying relevant history to update stable positions
     * accurately. To minimize the performance impact of history replay, the system
     * updates cursor info to reference only the IDs of currently present elements,
     * thereby reducing the need for replay.
     */
    open func getCursor(pos: UInt32, side: Side) -> Cursor? {
        return try! FfiConverterOptionTypeCursor.lift(try! rustCall {
            uniffi_loro_fn_method_lorotext_get_cursor(self.uniffiClonePointer(),
                                                      FfiConverterUInt32.lower(pos),
                                                      FfiConverterTypeSide.lower(side), $0)
        })
    }

    /**
     * Get the [ContainerID]  of the text container.
     */
    open func id() -> ContainerId {
        return try! FfiConverterTypeContainerID.lift(try! rustCall {
            uniffi_loro_fn_method_lorotext_id(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Insert a string at the given unicode position.
     */
    open func insert(pos: UInt32, s: String) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorotext_insert(self.uniffiClonePointer(),
                                              FfiConverterUInt32.lower(pos),
                                              FfiConverterString.lower(s), $0)
    }
    }

    /**
     * Insert a string at the given utf-8 position.
     */
    open func insertUtf8(pos: UInt32, s: String) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorotext_insert_utf8(self.uniffiClonePointer(),
                                                   FfiConverterUInt32.lower(pos),
                                                   FfiConverterString.lower(s), $0)
    }
    }

    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    open func isAttached() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_lorotext_is_attached(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Whether the text container is empty.
     */
    open func isEmpty() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_lorotext_is_empty(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the length of the text container in Unicode.
     */
    open func lenUnicode() -> UInt32 {
        return try! FfiConverterUInt32.lift(try! rustCall {
            uniffi_loro_fn_method_lorotext_len_unicode(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the length of the text container in UTF-16.
     */
    open func lenUtf16() -> UInt32 {
        return try! FfiConverterUInt32.lift(try! rustCall {
            uniffi_loro_fn_method_lorotext_len_utf16(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the length of the text container in UTF-8.
     */
    open func lenUtf8() -> UInt32 {
        return try! FfiConverterUInt32.lift(try! rustCall {
            uniffi_loro_fn_method_lorotext_len_utf8(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Mark a range of text with a key-value pair.
     *
     * You can use it to create a highlight, make a range of text bold, or add a link to a range of text.
     *
     * You can specify the `expand` option to set the behavior when inserting text at the boundary of the range.
     *
     * - `after`(default): when inserting text right after the given range, the mark will be expanded to include the inserted text
     * - `before`: when inserting text right before the given range, the mark will be expanded to include the inserted text
     * - `none`: the mark will not be expanded to include the inserted text at the boundaries
     * - `both`: when inserting text either right before or right after the given range, the mark will be expanded to include the inserted text
     *
     * *You should make sure that a key is always associated with the same expand type.*
     *
     * Note: this is not suitable for unmergeable annotations like comments.
     */
    open func mark(from: UInt32, to: UInt32, key: String, value: LoroValueLike) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorotext_mark(self.uniffiClonePointer(),
                                            FfiConverterUInt32.lower(from),
                                            FfiConverterUInt32.lower(to),
                                            FfiConverterString.lower(key),
                                            FfiConverterTypeLoroValueLike.lower(value), $0)
    }
    }

    /**
     * Get a string slice at the given Unicode range
     */
    open func slice(startIndex: UInt32, endIndex: UInt32) throws -> String {
        return try FfiConverterString.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorotext_slice(self.uniffiClonePointer(),
                                                 FfiConverterUInt32.lower(startIndex),
                                                 FfiConverterUInt32.lower(endIndex), $0)
        })
    }

    /**
     * Delete specified character and insert string at the same position at given unicode position.
     */
    open func splice(pos: UInt32, len: UInt32, s: String) throws -> String {
        return try FfiConverterString.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorotext_splice(self.uniffiClonePointer(),
                                                  FfiConverterUInt32.lower(pos),
                                                  FfiConverterUInt32.lower(len),
                                                  FfiConverterString.lower(s), $0)
        })
    }

    /**
     * Get the text in [Delta](https://quilljs.com/docs/delta/) format.
     */
    open func toDelta() -> LoroValue {
        return try! FfiConverterTypeLoroValue.lift(try! rustCall {
            uniffi_loro_fn_method_lorotext_to_delta(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the text content of the text container.
     */
    open func toString() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_loro_fn_method_lorotext_to_string(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Unmark a range of text with a key and a value.
     *
     * You can use it to remove highlights, bolds or links
     *
     * You can specify the `expand` option to set the behavior when inserting text at the boundary of the range.
     *
     * **Note: You should specify the same expand type as when you mark the text.**
     *
     * - `after`(default): when inserting text right after the given range, the mark will be expanded to include the inserted text
     * - `before`: when inserting text right before the given range, the mark will be expanded to include the inserted text
     * - `none`: the mark will not be expanded to include the inserted text at the boundaries
     * - `both`: when inserting text either right before or right after the given range, the mark will be expanded to include the inserted text
     *
     * *You should make sure that a key is always associated with the same expand type.*
     *
     * Note: you cannot delete unmergeable annotations like comments by this method.
     */
    open func unmark(from: UInt32, to: UInt32, key: String) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorotext_unmark(self.uniffiClonePointer(),
                                              FfiConverterUInt32.lower(from),
                                              FfiConverterUInt32.lower(to),
                                              FfiConverterString.lower(key), $0)
    }
    }

    /**
     * Update the current text based on the provided text.
     */
    open func update(s: String) { try! rustCall {
        uniffi_loro_fn_method_lorotext_update(self.uniffiClonePointer(),
                                              FfiConverterString.lower(s), $0)
    }
    }
}

public struct FfiConverterTypeLoroText: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroText

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroText {
        return LoroText(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroText) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroText {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroText, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeLoroText_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroText {
    return try FfiConverterTypeLoroText.lift(pointer)
}

public func FfiConverterTypeLoroText_lower(_ value: LoroText) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroText.lower(value)
}

public protocol LoroTreeProtocol: AnyObject {
    /**
     * Return all children of the target node.
     *
     * If the parent node does not exist, return `None`.
     */
    func children(parent: TreeId?) -> [TreeId]?

    /**
     * Return the number of children of the target node.
     */
    func childrenNum(parent: TreeId?) -> UInt32?

    /**
     * Return whether target node exists.
     */
    func contains(target: TreeId) -> Bool

    /**
     * Create a new tree node and return the [`TreeID`].
     *
     * If the `parent` is `None`, the created node is the root of a tree.
     * Otherwise, the created node is a child of the parent tree node.
     */
    func create(parent: TreeId?) throws -> TreeId

    /**
     * Create a new tree node at the given index and return the [`TreeID`].
     *
     * If the `parent` is `None`, the created node is the root of a tree.
     * If the `index` is greater than the number of children of the parent, error will be returned.
     */
    func createAt(parent: TreeId?, index: UInt32) throws -> TreeId

    /**
     * Delete a tree node.
     *
     * Note: If the deleted node has children, the children do not appear in the state
     * rather than actually being deleted.
     */
    func delete(target: TreeId) throws

    /**
     * Return the fractional index of the target node with hex format.
     */
    func fractionalIndex(target: TreeId) -> String?

    /**
     * Get the associated metadata map handler of a tree node.
     */
    func getMeta(target: TreeId) throws -> LoroMap

    /**
     * Return the flat array of the forest.
     *
     * Note: the metadata will be not resolved. So if you don't only care about hierarchy
     * but also the metadata, you should use `get_value_with_meta()`.
     */
    func getValue() -> LoroValue

    /**
     * Return the flat array of the forest, each node is with metadata.
     */
    func getValueWithMeta() -> LoroValue

    /**
     * Return container id of the tree.
     */
    func id() -> ContainerId

    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    func isAttached() -> Bool

    /**
     * Move the `target` node to be a child of the `parent` node.
     *
     * If the `parent` is `None`, the `target` node will be a root.
     */
    func mov(target: TreeId, parent: TreeId?) throws

    /**
     * Move the `target` node to be a child after the `after` node with the same parent.
     */
    func movAfter(target: TreeId, after: TreeId) throws

    /**
     * Move the `target` node to be a child before the `before` node with the same parent.
     */
    func movBefore(target: TreeId, before: TreeId) throws

    /**
     * Move the `target` node to be a child of the `parent` node at the given index.
     * If the `parent` is `None`, the `target` node will be a root.
     */
    func movTo(target: TreeId, parent: TreeId?, to: UInt32) throws

    /**
     * Return all nodes
     */
    func nodes() -> [TreeId]

    /**
     * Return the parent of target node.
     *
     * - If the target node does not exist, throws Error.
     * - If the target node is a root node, return nil.
     */
    func parent(target: TreeId) throws -> TreeId?
}

open class LoroTree:
    LoroTreeProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorotree(self.pointer, $0) }
    }

    /**
     * Create a new container that is detached from the document.
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_loro_fn_constructor_lorotree_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorotree(pointer, $0) }
    }

    /**
     * Return all children of the target node.
     *
     * If the parent node does not exist, return `None`.
     */
    open func children(parent: TreeId?) -> [TreeId]? {
        return try! FfiConverterOptionSequenceTypeTreeID.lift(try! rustCall {
            uniffi_loro_fn_method_lorotree_children(self.uniffiClonePointer(),
                                                    FfiConverterOptionTypeTreeID.lower(parent), $0)
        })
    }

    /**
     * Return the number of children of the target node.
     */
    open func childrenNum(parent: TreeId?) -> UInt32? {
        return try! FfiConverterOptionUInt32.lift(try! rustCall {
            uniffi_loro_fn_method_lorotree_children_num(self.uniffiClonePointer(),
                                                        FfiConverterOptionTypeTreeID.lower(parent), $0)
        })
    }

    /**
     * Return whether target node exists.
     */
    open func contains(target: TreeId) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_lorotree_contains(self.uniffiClonePointer(),
                                                    FfiConverterTypeTreeID.lower(target), $0)
        })
    }

    /**
     * Create a new tree node and return the [`TreeID`].
     *
     * If the `parent` is `None`, the created node is the root of a tree.
     * Otherwise, the created node is a child of the parent tree node.
     */
    open func create(parent: TreeId?) throws -> TreeId {
        return try FfiConverterTypeTreeID.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorotree_create(self.uniffiClonePointer(),
                                                  FfiConverterOptionTypeTreeID.lower(parent), $0)
        })
    }

    /**
     * Create a new tree node at the given index and return the [`TreeID`].
     *
     * If the `parent` is `None`, the created node is the root of a tree.
     * If the `index` is greater than the number of children of the parent, error will be returned.
     */
    open func createAt(parent: TreeId?, index: UInt32) throws -> TreeId {
        return try FfiConverterTypeTreeID.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorotree_create_at(self.uniffiClonePointer(),
                                                     FfiConverterOptionTypeTreeID.lower(parent),
                                                     FfiConverterUInt32.lower(index), $0)
        })
    }

    /**
     * Delete a tree node.
     *
     * Note: If the deleted node has children, the children do not appear in the state
     * rather than actually being deleted.
     */
    open func delete(target: TreeId) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorotree_delete(self.uniffiClonePointer(),
                                              FfiConverterTypeTreeID.lower(target), $0)
    }
    }

    /**
     * Return the fractional index of the target node with hex format.
     */
    open func fractionalIndex(target: TreeId) -> String? {
        return try! FfiConverterOptionString.lift(try! rustCall {
            uniffi_loro_fn_method_lorotree_fractional_index(self.uniffiClonePointer(),
                                                            FfiConverterTypeTreeID.lower(target), $0)
        })
    }

    /**
     * Get the associated metadata map handler of a tree node.
     */
    open func getMeta(target: TreeId) throws -> LoroMap {
        return try FfiConverterTypeLoroMap.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorotree_get_meta(self.uniffiClonePointer(),
                                                    FfiConverterTypeTreeID.lower(target), $0)
        })
    }

    /**
     * Return the flat array of the forest.
     *
     * Note: the metadata will be not resolved. So if you don't only care about hierarchy
     * but also the metadata, you should use `get_value_with_meta()`.
     */
    open func getValue() -> LoroValue {
        return try! FfiConverterTypeLoroValue.lift(try! rustCall {
            uniffi_loro_fn_method_lorotree_get_value(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the flat array of the forest, each node is with metadata.
     */
    open func getValueWithMeta() -> LoroValue {
        return try! FfiConverterTypeLoroValue.lift(try! rustCall {
            uniffi_loro_fn_method_lorotree_get_value_with_meta(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return container id of the tree.
     */
    open func id() -> ContainerId {
        return try! FfiConverterTypeContainerID.lift(try! rustCall {
            uniffi_loro_fn_method_lorotree_id(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    open func isAttached() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_lorotree_is_attached(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Move the `target` node to be a child of the `parent` node.
     *
     * If the `parent` is `None`, the `target` node will be a root.
     */
    open func mov(target: TreeId, parent: TreeId?) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorotree_mov(self.uniffiClonePointer(),
                                           FfiConverterTypeTreeID.lower(target),
                                           FfiConverterOptionTypeTreeID.lower(parent), $0)
    }
    }

    /**
     * Move the `target` node to be a child after the `after` node with the same parent.
     */
    open func movAfter(target: TreeId, after: TreeId) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorotree_mov_after(self.uniffiClonePointer(),
                                                 FfiConverterTypeTreeID.lower(target),
                                                 FfiConverterTypeTreeID.lower(after), $0)
    }
    }

    /**
     * Move the `target` node to be a child before the `before` node with the same parent.
     */
    open func movBefore(target: TreeId, before: TreeId) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorotree_mov_before(self.uniffiClonePointer(),
                                                  FfiConverterTypeTreeID.lower(target),
                                                  FfiConverterTypeTreeID.lower(before), $0)
    }
    }

    /**
     * Move the `target` node to be a child of the `parent` node at the given index.
     * If the `parent` is `None`, the `target` node will be a root.
     */
    open func movTo(target: TreeId, parent: TreeId?, to: UInt32) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_lorotree_mov_to(self.uniffiClonePointer(),
                                              FfiConverterTypeTreeID.lower(target),
                                              FfiConverterOptionTypeTreeID.lower(parent),
                                              FfiConverterUInt32.lower(to), $0)
    }
    }

    /**
     * Return all nodes
     */
    open func nodes() -> [TreeId] {
        return try! FfiConverterSequenceTypeTreeID.lift(try! rustCall {
            uniffi_loro_fn_method_lorotree_nodes(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the parent of target node.
     *
     * - If the target node does not exist, throws Error.
     * - If the target node is a root node, return nil.
     */
    open func parent(target: TreeId) throws -> TreeId? {
        return try FfiConverterOptionTypeTreeID.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_lorotree_parent(self.uniffiClonePointer(),
                                                  FfiConverterTypeTreeID.lower(target), $0)
        })
    }
}

public struct FfiConverterTypeLoroTree: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroTree

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroTree {
        return LoroTree(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroTree) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroTree {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroTree, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeLoroTree_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroTree {
    return try FfiConverterTypeLoroTree.lift(pointer)
}

public func FfiConverterTypeLoroTree_lower(_ value: LoroTree) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroTree.lower(value)
}

public protocol LoroUnknownProtocol: AnyObject {
    /**
     * Get the container id.
     */
    func id() -> ContainerId
}

open class LoroUnknown:
    LoroUnknownProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorounknown(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorounknown(pointer, $0) }
    }

    /**
     * Get the container id.
     */
    open func id() -> ContainerId {
        return try! FfiConverterTypeContainerID.lift(try! rustCall {
            uniffi_loro_fn_method_lorounknown_id(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeLoroUnknown: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroUnknown

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroUnknown {
        return LoroUnknown(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroUnknown) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroUnknown {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroUnknown, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeLoroUnknown_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroUnknown {
    return try FfiConverterTypeLoroUnknown.lift(pointer)
}

public func FfiConverterTypeLoroUnknown_lower(_ value: LoroUnknown) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroUnknown.lower(value)
}

public protocol LoroValueLike: Any {
    func asLoroValue() -> LoroValue
}

open class LoroValueLikeImpl:
    LoroValueLike
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorovaluelike(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorovaluelike(pointer, $0) }
    }

    open func asLoroValue() -> LoroValue {
        return try! FfiConverterTypeLoroValue.lift(try! rustCall {
            uniffi_loro_fn_method_lorovaluelike_as_loro_value(self.uniffiClonePointer(), $0)
        })
    }
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceLoroValueLike {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceLoroValueLike = .init(
        asLoroValue: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> LoroValue in
                guard let uniffiObj = try? FfiConverterTypeLoroValueLike.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.asLoroValue(
                )
            }

            let writeReturn = { uniffiOutReturn.pointee = FfiConverterTypeLoroValue.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeLoroValueLike.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface LoroValueLike: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitLoroValueLike() {
    uniffi_loro_fn_init_callback_vtable_lorovaluelike(&UniffiCallbackInterfaceLoroValueLike.vtable)
}

public struct FfiConverterTypeLoroValueLike: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<LoroValueLike>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroValueLike

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroValueLike {
        return LoroValueLikeImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroValueLike) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroValueLike {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroValueLike, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeLoroValueLike_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroValueLike {
    return try FfiConverterTypeLoroValueLike.lift(pointer)
}

public func FfiConverterTypeLoroValueLike_lower(_ value: LoroValueLike) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroValueLike.lower(value)
}

public protocol OnPop: AnyObject {
    func onPop(undoOrRedo: UndoOrRedo, span: CounterSpan, undoMeta: UndoItemMeta)
}

open class OnPopImpl:
    OnPop
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_onpop(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_onpop(pointer, $0) }
    }

    open func onPop(undoOrRedo: UndoOrRedo, span: CounterSpan, undoMeta: UndoItemMeta) { try! rustCall {
        uniffi_loro_fn_method_onpop_on_pop(self.uniffiClonePointer(),
                                           FfiConverterTypeUndoOrRedo.lower(undoOrRedo),
                                           FfiConverterTypeCounterSpan.lower(span),
                                           FfiConverterTypeUndoItemMeta.lower(undoMeta), $0)
    }
    }
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceOnPop {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceOnPop = .init(
        onPop: { (
            uniffiHandle: UInt64,
            undoOrRedo: RustBuffer,
            span: RustBuffer,
            undoMeta: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeOnPop.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onPop(
                    undoOrRedo: FfiConverterTypeUndoOrRedo.lift(undoOrRedo),
                    span: FfiConverterTypeCounterSpan.lift(span),
                    undoMeta: FfiConverterTypeUndoItemMeta.lift(undoMeta)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeOnPop.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface OnPop: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitOnPop() {
    uniffi_loro_fn_init_callback_vtable_onpop(&UniffiCallbackInterfaceOnPop.vtable)
}

public struct FfiConverterTypeOnPop: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<OnPop>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = OnPop

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> OnPop {
        return OnPopImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: OnPop) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OnPop {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: OnPop, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeOnPop_lift(_ pointer: UnsafeMutableRawPointer) throws -> OnPop {
    return try FfiConverterTypeOnPop.lift(pointer)
}

public func FfiConverterTypeOnPop_lower(_ value: OnPop) -> UnsafeMutableRawPointer {
    return FfiConverterTypeOnPop.lower(value)
}

public protocol OnPush: AnyObject {
    func onPush(undoOrRedo: UndoOrRedo, span: CounterSpan) -> UndoItemMeta
}

open class OnPushImpl:
    OnPush
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_onpush(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_onpush(pointer, $0) }
    }

    open func onPush(undoOrRedo: UndoOrRedo, span: CounterSpan) -> UndoItemMeta {
        return try! FfiConverterTypeUndoItemMeta.lift(try! rustCall {
            uniffi_loro_fn_method_onpush_on_push(self.uniffiClonePointer(),
                                                 FfiConverterTypeUndoOrRedo.lower(undoOrRedo),
                                                 FfiConverterTypeCounterSpan.lower(span), $0)
        })
    }
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceOnPush {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceOnPush = .init(
        onPush: { (
            uniffiHandle: UInt64,
            undoOrRedo: RustBuffer,
            span: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> UndoItemMeta in
                guard let uniffiObj = try? FfiConverterTypeOnPush.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onPush(
                    undoOrRedo: FfiConverterTypeUndoOrRedo.lift(undoOrRedo),
                    span: FfiConverterTypeCounterSpan.lift(span)
                )
            }

            let writeReturn = { uniffiOutReturn.pointee = FfiConverterTypeUndoItemMeta.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeOnPush.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface OnPush: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitOnPush() {
    uniffi_loro_fn_init_callback_vtable_onpush(&UniffiCallbackInterfaceOnPush.vtable)
}

public struct FfiConverterTypeOnPush: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<OnPush>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = OnPush

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> OnPush {
        return OnPushImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: OnPush) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OnPush {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: OnPush, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeOnPush_lift(_ pointer: UnsafeMutableRawPointer) throws -> OnPush {
    return try FfiConverterTypeOnPush.lift(pointer)
}

public func FfiConverterTypeOnPush_lower(_ value: OnPush) -> UnsafeMutableRawPointer {
    return FfiConverterTypeOnPush.lower(value)
}

public protocol Subscriber: AnyObject {
    func onDiff(diff: DiffEvent)
}

open class SubscriberImpl:
    Subscriber
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_subscriber(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_subscriber(pointer, $0) }
    }

    open func onDiff(diff: DiffEvent) { try! rustCall {
        uniffi_loro_fn_method_subscriber_on_diff(self.uniffiClonePointer(),
                                                 FfiConverterTypeDiffEvent.lower(diff), $0)
    }
    }
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceSubscriber {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceSubscriber = .init(
        onDiff: { (
            uniffiHandle: UInt64,
            diff: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeSubscriber.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onDiff(
                    diff: FfiConverterTypeDiffEvent.lift(diff)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeSubscriber.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface Subscriber: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitSubscriber() {
    uniffi_loro_fn_init_callback_vtable_subscriber(&UniffiCallbackInterfaceSubscriber.vtable)
}

public struct FfiConverterTypeSubscriber: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<Subscriber>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Subscriber

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Subscriber {
        return SubscriberImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Subscriber) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Subscriber {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Subscriber, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeSubscriber_lift(_ pointer: UnsafeMutableRawPointer) throws -> Subscriber {
    return try FfiConverterTypeSubscriber.lift(pointer)
}

public func FfiConverterTypeSubscriber_lower(_ value: Subscriber) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSubscriber.lower(value)
}

public protocol UndoManagerProtocol: AnyObject {
    /**
     * If a local event's origin matches the given prefix, it will not be recorded in the
     * undo stack.
     */
    func addExcludeOriginPrefix(prefix: String)

    /**
     * Whether the undo manager can redo.
     */
    func canRedo() -> Bool

    /**
     * Whether the undo manager can undo.
     */
    func canUndo() -> Bool

    /**
     * Record a new checkpoint.
     */
    func recordNewCheckpoint(doc: LoroDoc) throws

    /**
     * Redo the last change made by the peer.
     */
    func redo(doc: LoroDoc) throws -> Bool

    /**
     * Set the maximum number of undo steps. The default value is 100.
     */
    func setMaxUndoSteps(size: UInt32)

    /**
     * Set the merge interval in ms. The default value is 0, which means no merge.
     */
    func setMergeInterval(interval: Int64)

    /**
     * Set the listener for pop events.
     * The listener will be called when an undo/redo item is popped from the stack.
     */
    func setOnPop(onPop: OnPop?)

    /**
     * Set the listener for push events.
     * The listener will be called when a new undo/redo item is pushed into the stack.
     */
    func setOnPush(onPush: OnPush?)

    /**
     * Undo the last change made by the peer.
     */
    func undo(doc: LoroDoc) throws -> Bool
}

open class UndoManager:
    UndoManagerProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_undomanager(self.pointer, $0) }
    }

    /**
     * Create a new UndoManager.
     */
    public convenience init(doc: LoroDoc) {
        let pointer =
            try! rustCall {
                uniffi_loro_fn_constructor_undomanager_new(
                    FfiConverterTypeLoroDoc.lower(doc), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_undomanager(pointer, $0) }
    }

    /**
     * If a local event's origin matches the given prefix, it will not be recorded in the
     * undo stack.
     */
    open func addExcludeOriginPrefix(prefix: String) { try! rustCall {
        uniffi_loro_fn_method_undomanager_add_exclude_origin_prefix(self.uniffiClonePointer(),
                                                                    FfiConverterString.lower(prefix), $0)
    }
    }

    /**
     * Whether the undo manager can redo.
     */
    open func canRedo() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_undomanager_can_redo(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Whether the undo manager can undo.
     */
    open func canUndo() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_undomanager_can_undo(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Record a new checkpoint.
     */
    open func recordNewCheckpoint(doc: LoroDoc) throws { try rustCallWithError(FfiConverterTypeLoroError.lift) {
        uniffi_loro_fn_method_undomanager_record_new_checkpoint(self.uniffiClonePointer(),
                                                                FfiConverterTypeLoroDoc.lower(doc), $0)
    }
    }

    /**
     * Redo the last change made by the peer.
     */
    open func redo(doc: LoroDoc) throws -> Bool {
        return try FfiConverterBool.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_undomanager_redo(self.uniffiClonePointer(),
                                                   FfiConverterTypeLoroDoc.lower(doc), $0)
        })
    }

    /**
     * Set the maximum number of undo steps. The default value is 100.
     */
    open func setMaxUndoSteps(size: UInt32) { try! rustCall {
        uniffi_loro_fn_method_undomanager_set_max_undo_steps(self.uniffiClonePointer(),
                                                             FfiConverterUInt32.lower(size), $0)
    }
    }

    /**
     * Set the merge interval in ms. The default value is 0, which means no merge.
     */
    open func setMergeInterval(interval: Int64) { try! rustCall {
        uniffi_loro_fn_method_undomanager_set_merge_interval(self.uniffiClonePointer(),
                                                             FfiConverterInt64.lower(interval), $0)
    }
    }

    /**
     * Set the listener for pop events.
     * The listener will be called when an undo/redo item is popped from the stack.
     */
    open func setOnPop(onPop: OnPop?) { try! rustCall {
        uniffi_loro_fn_method_undomanager_set_on_pop(self.uniffiClonePointer(),
                                                     FfiConverterOptionTypeOnPop.lower(onPop), $0)
    }
    }

    /**
     * Set the listener for push events.
     * The listener will be called when a new undo/redo item is pushed into the stack.
     */
    open func setOnPush(onPush: OnPush?) { try! rustCall {
        uniffi_loro_fn_method_undomanager_set_on_push(self.uniffiClonePointer(),
                                                      FfiConverterOptionTypeOnPush.lower(onPush), $0)
    }
    }

    /**
     * Undo the last change made by the peer.
     */
    open func undo(doc: LoroDoc) throws -> Bool {
        return try FfiConverterBool.lift(rustCallWithError(FfiConverterTypeLoroError.lift) {
            uniffi_loro_fn_method_undomanager_undo(self.uniffiClonePointer(),
                                                   FfiConverterTypeLoroDoc.lower(doc), $0)
        })
    }
}

public struct FfiConverterTypeUndoManager: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = UndoManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> UndoManager {
        return UndoManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: UndoManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UndoManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: UndoManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeUndoManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> UndoManager {
    return try FfiConverterTypeUndoManager.lift(pointer)
}

public func FfiConverterTypeUndoManager_lower(_ value: UndoManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeUndoManager.lower(value)
}

public protocol ValueOrContainerProtocol: AnyObject {
    func asContainer() -> ContainerId?

    func asLoroCounter() -> LoroCounter?

    func asLoroList() -> LoroList?

    func asLoroMap() -> LoroMap?

    func asLoroMovableList() -> LoroMovableList?

    func asLoroText() -> LoroText?

    func asLoroTree() -> LoroTree?

    func asValue() -> LoroValue?

    func isContainer() -> Bool

    func isValue() -> Bool
}

open class ValueOrContainer:
    ValueOrContainerProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_valueorcontainer(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_valueorcontainer(pointer, $0) }
    }

    open func asContainer() -> ContainerId? {
        return try! FfiConverterOptionTypeContainerID.lift(try! rustCall {
            uniffi_loro_fn_method_valueorcontainer_as_container(self.uniffiClonePointer(), $0)
        })
    }

    open func asLoroCounter() -> LoroCounter? {
        return try! FfiConverterOptionTypeLoroCounter.lift(try! rustCall {
            uniffi_loro_fn_method_valueorcontainer_as_loro_counter(self.uniffiClonePointer(), $0)
        })
    }

    open func asLoroList() -> LoroList? {
        return try! FfiConverterOptionTypeLoroList.lift(try! rustCall {
            uniffi_loro_fn_method_valueorcontainer_as_loro_list(self.uniffiClonePointer(), $0)
        })
    }

    open func asLoroMap() -> LoroMap? {
        return try! FfiConverterOptionTypeLoroMap.lift(try! rustCall {
            uniffi_loro_fn_method_valueorcontainer_as_loro_map(self.uniffiClonePointer(), $0)
        })
    }

    open func asLoroMovableList() -> LoroMovableList? {
        return try! FfiConverterOptionTypeLoroMovableList.lift(try! rustCall {
            uniffi_loro_fn_method_valueorcontainer_as_loro_movable_list(self.uniffiClonePointer(), $0)
        })
    }

    open func asLoroText() -> LoroText? {
        return try! FfiConverterOptionTypeLoroText.lift(try! rustCall {
            uniffi_loro_fn_method_valueorcontainer_as_loro_text(self.uniffiClonePointer(), $0)
        })
    }

    open func asLoroTree() -> LoroTree? {
        return try! FfiConverterOptionTypeLoroTree.lift(try! rustCall {
            uniffi_loro_fn_method_valueorcontainer_as_loro_tree(self.uniffiClonePointer(), $0)
        })
    }

    open func asValue() -> LoroValue? {
        return try! FfiConverterOptionTypeLoroValue.lift(try! rustCall {
            uniffi_loro_fn_method_valueorcontainer_as_value(self.uniffiClonePointer(), $0)
        })
    }

    open func isContainer() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_valueorcontainer_is_container(self.uniffiClonePointer(), $0)
        })
    }

    open func isValue() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_valueorcontainer_is_value(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeValueOrContainer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ValueOrContainer

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ValueOrContainer {
        return ValueOrContainer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ValueOrContainer) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ValueOrContainer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ValueOrContainer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeValueOrContainer_lift(_ pointer: UnsafeMutableRawPointer) throws -> ValueOrContainer {
    return try FfiConverterTypeValueOrContainer.lift(pointer)
}

public func FfiConverterTypeValueOrContainer_lower(_ value: ValueOrContainer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeValueOrContainer.lower(value)
}

public protocol VersionVectorProtocol: AnyObject {
    func getLast(peer: UInt64) -> Int32?

    func includesId(id: Id) -> Bool

    func includesVv(other: VersionVector) -> Bool
}

open class VersionVector:
    VersionVectorProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_versionvector(self.pointer, $0) }
    }

    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_loro_fn_constructor_versionvector_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_versionvector(pointer, $0) }
    }

    open func getLast(peer: UInt64) -> Int32? {
        return try! FfiConverterOptionInt32.lift(try! rustCall {
            uniffi_loro_fn_method_versionvector_get_last(self.uniffiClonePointer(),
                                                         FfiConverterUInt64.lower(peer), $0)
        })
    }

    open func includesId(id: Id) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_versionvector_includes_id(self.uniffiClonePointer(),
                                                            FfiConverterTypeID.lower(id), $0)
        })
    }

    open func includesVv(other: VersionVector) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_loro_fn_method_versionvector_includes_vv(self.uniffiClonePointer(),
                                                            FfiConverterTypeVersionVector.lower(other), $0)
        })
    }
}

public struct FfiConverterTypeVersionVector: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = VersionVector

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> VersionVector {
        return VersionVector(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: VersionVector) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VersionVector {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: VersionVector, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeVersionVector_lift(_ pointer: UnsafeMutableRawPointer) throws -> VersionVector {
    return try FfiConverterTypeVersionVector.lift(pointer)
}

public func FfiConverterTypeVersionVector_lower(_ value: VersionVector) -> UnsafeMutableRawPointer {
    return FfiConverterTypeVersionVector.lower(value)
}

public struct AbsolutePosition {
    public var pos: UInt32
    public var side: Side

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(pos: UInt32, side: Side) {
        self.pos = pos
        self.side = side
    }
}

extension AbsolutePosition: Equatable, Hashable {
    public static func == (lhs: AbsolutePosition, rhs: AbsolutePosition) -> Bool {
        if lhs.pos != rhs.pos {
            return false
        }
        if lhs.side != rhs.side {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(pos)
        hasher.combine(side)
    }
}

public struct FfiConverterTypeAbsolutePosition: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AbsolutePosition {
        return
            try AbsolutePosition(
                pos: FfiConverterUInt32.read(from: &buf),
                side: FfiConverterTypeSide.read(from: &buf)
            )
    }

    public static func write(_ value: AbsolutePosition, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.pos, into: &buf)
        FfiConverterTypeSide.write(value.side, into: &buf)
    }
}

public func FfiConverterTypeAbsolutePosition_lift(_ buf: RustBuffer) throws -> AbsolutePosition {
    return try FfiConverterTypeAbsolutePosition.lift(buf)
}

public func FfiConverterTypeAbsolutePosition_lower(_ value: AbsolutePosition) -> RustBuffer {
    return FfiConverterTypeAbsolutePosition.lower(value)
}

/**
 * A diff of a container.
 */
public struct ContainerDiff {
    /**
     * The target container id of the diff.
     */
    public var target: ContainerId
    /**
     * The path of the diff.
     */
    public var path: [PathItem]
    /**
     * Whether the diff is from unknown container.
     */
    public var isUnknown: Bool
    /**
     * The diff
     */
    public var diff: Diff

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The target container id of the diff.
         */ target: ContainerId,
        /**
            * The path of the diff.
            */ path: [PathItem],
        /**
            * Whether the diff is from unknown container.
            */ isUnknown: Bool,
        /**
            * The diff
            */ diff: Diff
    ) {
        self.target = target
        self.path = path
        self.isUnknown = isUnknown
        self.diff = diff
    }
}

public struct FfiConverterTypeContainerDiff: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContainerDiff {
        return
            try ContainerDiff(
                target: FfiConverterTypeContainerID.read(from: &buf),
                path: FfiConverterSequenceTypePathItem.read(from: &buf),
                isUnknown: FfiConverterBool.read(from: &buf),
                diff: FfiConverterTypeDiff.read(from: &buf)
            )
    }

    public static func write(_ value: ContainerDiff, into buf: inout [UInt8]) {
        FfiConverterTypeContainerID.write(value.target, into: &buf)
        FfiConverterSequenceTypePathItem.write(value.path, into: &buf)
        FfiConverterBool.write(value.isUnknown, into: &buf)
        FfiConverterTypeDiff.write(value.diff, into: &buf)
    }
}

public func FfiConverterTypeContainerDiff_lift(_ buf: RustBuffer) throws -> ContainerDiff {
    return try FfiConverterTypeContainerDiff.lift(buf)
}

public func FfiConverterTypeContainerDiff_lower(_ value: ContainerDiff) -> RustBuffer {
    return FfiConverterTypeContainerDiff.lower(value)
}

public struct CounterSpan {
    public var start: Int32
    public var end: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(start: Int32, end: Int32) {
        self.start = start
        self.end = end
    }
}

extension CounterSpan: Equatable, Hashable {
    public static func == (lhs: CounterSpan, rhs: CounterSpan) -> Bool {
        if lhs.start != rhs.start {
            return false
        }
        if lhs.end != rhs.end {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(start)
        hasher.combine(end)
    }
}

public struct FfiConverterTypeCounterSpan: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CounterSpan {
        return
            try CounterSpan(
                start: FfiConverterInt32.read(from: &buf),
                end: FfiConverterInt32.read(from: &buf)
            )
    }

    public static func write(_ value: CounterSpan, into buf: inout [UInt8]) {
        FfiConverterInt32.write(value.start, into: &buf)
        FfiConverterInt32.write(value.end, into: &buf)
    }
}

public func FfiConverterTypeCounterSpan_lift(_ buf: RustBuffer) throws -> CounterSpan {
    return try FfiConverterTypeCounterSpan.lift(buf)
}

public func FfiConverterTypeCounterSpan_lower(_ value: CounterSpan) -> RustBuffer {
    return FfiConverterTypeCounterSpan.lower(value)
}

public struct CursorWithPos {
    public var cursor: Cursor
    public var pos: AbsolutePosition

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(cursor: Cursor, pos: AbsolutePosition) {
        self.cursor = cursor
        self.pos = pos
    }
}

public struct FfiConverterTypeCursorWithPos: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CursorWithPos {
        return
            try CursorWithPos(
                cursor: FfiConverterTypeCursor.read(from: &buf),
                pos: FfiConverterTypeAbsolutePosition.read(from: &buf)
            )
    }

    public static func write(_ value: CursorWithPos, into buf: inout [UInt8]) {
        FfiConverterTypeCursor.write(value.cursor, into: &buf)
        FfiConverterTypeAbsolutePosition.write(value.pos, into: &buf)
    }
}

public func FfiConverterTypeCursorWithPos_lift(_ buf: RustBuffer) throws -> CursorWithPos {
    return try FfiConverterTypeCursorWithPos.lift(buf)
}

public func FfiConverterTypeCursorWithPos_lower(_ value: CursorWithPos) -> RustBuffer {
    return FfiConverterTypeCursorWithPos.lower(value)
}

public struct DiffEvent {
    /**
     * How the event is triggered.
     */
    public var triggeredBy: EventTriggerKind
    /**
     * The origin of the event.
     */
    public var origin: String
    /**
     * The current receiver of the event.
     */
    public var currentTarget: ContainerId?
    /**
     * The diffs of the event.
     */
    public var events: [ContainerDiff]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * How the event is triggered.
         */ triggeredBy: EventTriggerKind,
        /**
            * The origin of the event.
            */ origin: String,
        /**
            * The current receiver of the event.
            */ currentTarget: ContainerId?,
        /**
            * The diffs of the event.
            */ events: [ContainerDiff]
    ) {
        self.triggeredBy = triggeredBy
        self.origin = origin
        self.currentTarget = currentTarget
        self.events = events
    }
}

public struct FfiConverterTypeDiffEvent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiffEvent {
        return
            try DiffEvent(
                triggeredBy: FfiConverterTypeEventTriggerKind.read(from: &buf),
                origin: FfiConverterString.read(from: &buf),
                currentTarget: FfiConverterOptionTypeContainerID.read(from: &buf),
                events: FfiConverterSequenceTypeContainerDiff.read(from: &buf)
            )
    }

    public static func write(_ value: DiffEvent, into buf: inout [UInt8]) {
        FfiConverterTypeEventTriggerKind.write(value.triggeredBy, into: &buf)
        FfiConverterString.write(value.origin, into: &buf)
        FfiConverterOptionTypeContainerID.write(value.currentTarget, into: &buf)
        FfiConverterSequenceTypeContainerDiff.write(value.events, into: &buf)
    }
}

public func FfiConverterTypeDiffEvent_lift(_ buf: RustBuffer) throws -> DiffEvent {
    return try FfiConverterTypeDiffEvent.lift(buf)
}

public func FfiConverterTypeDiffEvent_lower(_ value: DiffEvent) -> RustBuffer {
    return FfiConverterTypeDiffEvent.lower(value)
}

public struct Id {
    public var peer: UInt64
    public var counter: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(peer: UInt64, counter: Int32) {
        self.peer = peer
        self.counter = counter
    }
}

extension Id: Equatable, Hashable {
    public static func == (lhs: Id, rhs: Id) -> Bool {
        if lhs.peer != rhs.peer {
            return false
        }
        if lhs.counter != rhs.counter {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(peer)
        hasher.combine(counter)
    }
}

public struct FfiConverterTypeID: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Id {
        return
            try Id(
                peer: FfiConverterUInt64.read(from: &buf),
                counter: FfiConverterInt32.read(from: &buf)
            )
    }

    public static func write(_ value: Id, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.peer, into: &buf)
        FfiConverterInt32.write(value.counter, into: &buf)
    }
}

public func FfiConverterTypeID_lift(_ buf: RustBuffer) throws -> Id {
    return try FfiConverterTypeID.lift(buf)
}

public func FfiConverterTypeID_lower(_ value: Id) -> RustBuffer {
    return FfiConverterTypeID.lower(value)
}

public struct MapDelta {
    public var updated: [String: ValueOrContainer?]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(updated: [String: ValueOrContainer?]) {
        self.updated = updated
    }
}

public struct FfiConverterTypeMapDelta: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MapDelta {
        return
            try MapDelta(
                updated: FfiConverterDictionaryStringOptionTypeValueOrContainer.read(from: &buf)
            )
    }

    public static func write(_ value: MapDelta, into buf: inout [UInt8]) {
        FfiConverterDictionaryStringOptionTypeValueOrContainer.write(value.updated, into: &buf)
    }
}

public func FfiConverterTypeMapDelta_lift(_ buf: RustBuffer) throws -> MapDelta {
    return try FfiConverterTypeMapDelta.lift(buf)
}

public func FfiConverterTypeMapDelta_lower(_ value: MapDelta) -> RustBuffer {
    return FfiConverterTypeMapDelta.lower(value)
}

public struct PathItem {
    public var container: ContainerId
    public var index: Index

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(container: ContainerId, index: Index) {
        self.container = container
        self.index = index
    }
}

extension PathItem: Equatable, Hashable {
    public static func == (lhs: PathItem, rhs: PathItem) -> Bool {
        if lhs.container != rhs.container {
            return false
        }
        if lhs.index != rhs.index {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(container)
        hasher.combine(index)
    }
}

public struct FfiConverterTypePathItem: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PathItem {
        return
            try PathItem(
                container: FfiConverterTypeContainerID.read(from: &buf),
                index: FfiConverterTypeIndex.read(from: &buf)
            )
    }

    public static func write(_ value: PathItem, into buf: inout [UInt8]) {
        FfiConverterTypeContainerID.write(value.container, into: &buf)
        FfiConverterTypeIndex.write(value.index, into: &buf)
    }
}

public func FfiConverterTypePathItem_lift(_ buf: RustBuffer) throws -> PathItem {
    return try FfiConverterTypePathItem.lift(buf)
}

public func FfiConverterTypePathItem_lower(_ value: PathItem) -> RustBuffer {
    return FfiConverterTypePathItem.lower(value)
}

public struct TreeDiff {
    public var diff: [TreeDiffItem]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(diff: [TreeDiffItem]) {
        self.diff = diff
    }
}

extension TreeDiff: Equatable, Hashable {
    public static func == (lhs: TreeDiff, rhs: TreeDiff) -> Bool {
        if lhs.diff != rhs.diff {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(diff)
    }
}

public struct FfiConverterTypeTreeDiff: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TreeDiff {
        return
            try TreeDiff(
                diff: FfiConverterSequenceTypeTreeDiffItem.read(from: &buf)
            )
    }

    public static func write(_ value: TreeDiff, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeTreeDiffItem.write(value.diff, into: &buf)
    }
}

public func FfiConverterTypeTreeDiff_lift(_ buf: RustBuffer) throws -> TreeDiff {
    return try FfiConverterTypeTreeDiff.lift(buf)
}

public func FfiConverterTypeTreeDiff_lower(_ value: TreeDiff) -> RustBuffer {
    return FfiConverterTypeTreeDiff.lower(value)
}

public struct TreeDiffItem {
    public var target: TreeId
    public var action: TreeExternalDiff

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(target: TreeId, action: TreeExternalDiff) {
        self.target = target
        self.action = action
    }
}

extension TreeDiffItem: Equatable, Hashable {
    public static func == (lhs: TreeDiffItem, rhs: TreeDiffItem) -> Bool {
        if lhs.target != rhs.target {
            return false
        }
        if lhs.action != rhs.action {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(target)
        hasher.combine(action)
    }
}

public struct FfiConverterTypeTreeDiffItem: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TreeDiffItem {
        return
            try TreeDiffItem(
                target: FfiConverterTypeTreeID.read(from: &buf),
                action: FfiConverterTypeTreeExternalDiff.read(from: &buf)
            )
    }

    public static func write(_ value: TreeDiffItem, into buf: inout [UInt8]) {
        FfiConverterTypeTreeID.write(value.target, into: &buf)
        FfiConverterTypeTreeExternalDiff.write(value.action, into: &buf)
    }
}

public func FfiConverterTypeTreeDiffItem_lift(_ buf: RustBuffer) throws -> TreeDiffItem {
    return try FfiConverterTypeTreeDiffItem.lift(buf)
}

public func FfiConverterTypeTreeDiffItem_lower(_ value: TreeDiffItem) -> RustBuffer {
    return FfiConverterTypeTreeDiffItem.lower(value)
}

public struct TreeId {
    public var peer: UInt64
    public var counter: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(peer: UInt64, counter: Int32) {
        self.peer = peer
        self.counter = counter
    }
}

extension TreeId: Equatable, Hashable {
    public static func == (lhs: TreeId, rhs: TreeId) -> Bool {
        if lhs.peer != rhs.peer {
            return false
        }
        if lhs.counter != rhs.counter {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(peer)
        hasher.combine(counter)
    }
}

public struct FfiConverterTypeTreeID: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TreeId {
        return
            try TreeId(
                peer: FfiConverterUInt64.read(from: &buf),
                counter: FfiConverterInt32.read(from: &buf)
            )
    }

    public static func write(_ value: TreeId, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.peer, into: &buf)
        FfiConverterInt32.write(value.counter, into: &buf)
    }
}

public func FfiConverterTypeTreeID_lift(_ buf: RustBuffer) throws -> TreeId {
    return try FfiConverterTypeTreeID.lift(buf)
}

public func FfiConverterTypeTreeID_lower(_ value: TreeId) -> RustBuffer {
    return FfiConverterTypeTreeID.lower(value)
}

public struct UndoItemMeta {
    public var value: LoroValue
    public var cursors: [CursorWithPos]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(value: LoroValue, cursors: [CursorWithPos]) {
        self.value = value
        self.cursors = cursors
    }
}

public struct FfiConverterTypeUndoItemMeta: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UndoItemMeta {
        return
            try UndoItemMeta(
                value: FfiConverterTypeLoroValue.read(from: &buf),
                cursors: FfiConverterSequenceTypeCursorWithPos.read(from: &buf)
            )
    }

    public static func write(_ value: UndoItemMeta, into buf: inout [UInt8]) {
        FfiConverterTypeLoroValue.write(value.value, into: &buf)
        FfiConverterSequenceTypeCursorWithPos.write(value.cursors, into: &buf)
    }
}

public func FfiConverterTypeUndoItemMeta_lift(_ buf: RustBuffer) throws -> UndoItemMeta {
    return try FfiConverterTypeUndoItemMeta.lift(buf)
}

public func FfiConverterTypeUndoItemMeta_lower(_ value: UndoItemMeta) -> RustBuffer {
    return FfiConverterTypeUndoItemMeta.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ContainerId {
    case root(name: String, containerType: ContainerType)
    case normal(peer: UInt64, counter: Int32, containerType: ContainerType)
}

public struct FfiConverterTypeContainerID: FfiConverterRustBuffer {
    typealias SwiftType = ContainerId

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContainerId {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .root(name: FfiConverterString.read(from: &buf), containerType: FfiConverterTypeContainerType.read(from: &buf))

        case 2: return try .normal(peer: FfiConverterUInt64.read(from: &buf), counter: FfiConverterInt32.read(from: &buf), containerType: FfiConverterTypeContainerType.read(from: &buf))

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContainerId, into buf: inout [UInt8]) {
        switch value {
        case let .root(name, containerType):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(name, into: &buf)
            FfiConverterTypeContainerType.write(containerType, into: &buf)

        case let .normal(peer, counter, containerType):
            writeInt(&buf, Int32(2))
            FfiConverterUInt64.write(peer, into: &buf)
            FfiConverterInt32.write(counter, into: &buf)
            FfiConverterTypeContainerType.write(containerType, into: &buf)
        }
    }
}

public func FfiConverterTypeContainerID_lift(_ buf: RustBuffer) throws -> ContainerId {
    return try FfiConverterTypeContainerID.lift(buf)
}

public func FfiConverterTypeContainerID_lower(_ value: ContainerId) -> RustBuffer {
    return FfiConverterTypeContainerID.lower(value)
}

extension ContainerId: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ContainerType {
    case text
    case map
    case list
    case movableList
    case tree
    case counter
    case unknown(kind: UInt8
    )
}

public struct FfiConverterTypeContainerType: FfiConverterRustBuffer {
    typealias SwiftType = ContainerType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContainerType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .text

        case 2: return .map

        case 3: return .list

        case 4: return .movableList

        case 5: return .tree

        case 6: return .counter

        case 7: return try .unknown(kind: FfiConverterUInt8.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContainerType, into buf: inout [UInt8]) {
        switch value {
        case .text:
            writeInt(&buf, Int32(1))

        case .map:
            writeInt(&buf, Int32(2))

        case .list:
            writeInt(&buf, Int32(3))

        case .movableList:
            writeInt(&buf, Int32(4))

        case .tree:
            writeInt(&buf, Int32(5))

        case .counter:
            writeInt(&buf, Int32(6))

        case let .unknown(kind):
            writeInt(&buf, Int32(7))
            FfiConverterUInt8.write(kind, into: &buf)
        }
    }
}

public func FfiConverterTypeContainerType_lift(_ buf: RustBuffer) throws -> ContainerType {
    return try FfiConverterTypeContainerType.lift(buf)
}

public func FfiConverterTypeContainerType_lower(_ value: ContainerType) -> RustBuffer {
    return FfiConverterTypeContainerType.lower(value)
}

extension ContainerType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Diff {
    case list(diff: [ListDiffItem]
    )
    case text(diff: [TextDelta]
    )
    case map(diff: MapDelta
    )
    case tree(diff: TreeDiff
    )
    case counter(diff: Double
    )
    case unknown
}

public struct FfiConverterTypeDiff: FfiConverterRustBuffer {
    typealias SwiftType = Diff

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Diff {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .list(diff: FfiConverterSequenceTypeListDiffItem.read(from: &buf)
            )

        case 2: return try .text(diff: FfiConverterSequenceTypeTextDelta.read(from: &buf)
            )

        case 3: return try .map(diff: FfiConverterTypeMapDelta.read(from: &buf)
            )

        case 4: return try .tree(diff: FfiConverterTypeTreeDiff.read(from: &buf)
            )

        case 5: return try .counter(diff: FfiConverterDouble.read(from: &buf)
            )

        case 6: return .unknown

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Diff, into buf: inout [UInt8]) {
        switch value {
        case let .list(diff):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceTypeListDiffItem.write(diff, into: &buf)

        case let .text(diff):
            writeInt(&buf, Int32(2))
            FfiConverterSequenceTypeTextDelta.write(diff, into: &buf)

        case let .map(diff):
            writeInt(&buf, Int32(3))
            FfiConverterTypeMapDelta.write(diff, into: &buf)

        case let .tree(diff):
            writeInt(&buf, Int32(4))
            FfiConverterTypeTreeDiff.write(diff, into: &buf)

        case let .counter(diff):
            writeInt(&buf, Int32(5))
            FfiConverterDouble.write(diff, into: &buf)

        case .unknown:
            writeInt(&buf, Int32(6))
        }
    }
}

public func FfiConverterTypeDiff_lift(_ buf: RustBuffer) throws -> Diff {
    return try FfiConverterTypeDiff.lift(buf)
}

public func FfiConverterTypeDiff_lower(_ value: Diff) -> RustBuffer {
    return FfiConverterTypeDiff.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The kind of the event trigger.
 */

public enum EventTriggerKind {
    /**
     * The event is triggered by a local transaction.
     */
    case local
    /**
     * The event is triggered by importing
     */
    case `import`
    /**
     * The event is triggered by checkout
     */
    case checkout
}

public struct FfiConverterTypeEventTriggerKind: FfiConverterRustBuffer {
    typealias SwiftType = EventTriggerKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EventTriggerKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .local

        case 2: return .import

        case 3: return .checkout

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: EventTriggerKind, into buf: inout [UInt8]) {
        switch value {
        case .local:
            writeInt(&buf, Int32(1))

        case .import:
            writeInt(&buf, Int32(2))

        case .checkout:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypeEventTriggerKind_lift(_ buf: RustBuffer) throws -> EventTriggerKind {
    return try FfiConverterTypeEventTriggerKind.lift(buf)
}

public func FfiConverterTypeEventTriggerKind_lower(_ value: EventTriggerKind) -> RustBuffer {
    return FfiConverterTypeEventTriggerKind.lower(value)
}

extension EventTriggerKind: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Index {
    case key(key: String
    )
    case seq(index: UInt32
    )
    case node(target: TreeId
    )
}

public struct FfiConverterTypeIndex: FfiConverterRustBuffer {
    typealias SwiftType = Index

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Index {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .key(key: FfiConverterString.read(from: &buf)
            )

        case 2: return try .seq(index: FfiConverterUInt32.read(from: &buf)
            )

        case 3: return try .node(target: FfiConverterTypeTreeID.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Index, into buf: inout [UInt8]) {
        switch value {
        case let .key(key):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(key, into: &buf)

        case let .seq(index):
            writeInt(&buf, Int32(2))
            FfiConverterUInt32.write(index, into: &buf)

        case let .node(target):
            writeInt(&buf, Int32(3))
            FfiConverterTypeTreeID.write(target, into: &buf)
        }
    }
}

public func FfiConverterTypeIndex_lift(_ buf: RustBuffer) throws -> Index {
    return try FfiConverterTypeIndex.lift(buf)
}

public func FfiConverterTypeIndex_lower(_ value: Index) -> RustBuffer {
    return FfiConverterTypeIndex.lower(value)
}

extension Index: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ListDiffItem {
    /**
     * Insert a new element into the list.
     */
    case insert(insert: [ValueOrContainer], isMove: Bool)
    /**
     * Delete n elements from the list at the current index.
     */
    case delete(delete: UInt32
    )
    /**
     * Retain n elements in the list.
     *
     * This is used to keep the current index unchanged.
     */
    case retain(retain: UInt32
    )
}

public struct FfiConverterTypeListDiffItem: FfiConverterRustBuffer {
    typealias SwiftType = ListDiffItem

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ListDiffItem {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .insert(insert: FfiConverterSequenceTypeValueOrContainer.read(from: &buf), isMove: FfiConverterBool.read(from: &buf))

        case 2: return try .delete(delete: FfiConverterUInt32.read(from: &buf)
            )

        case 3: return try .retain(retain: FfiConverterUInt32.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ListDiffItem, into buf: inout [UInt8]) {
        switch value {
        case let .insert(insert, isMove):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceTypeValueOrContainer.write(insert, into: &buf)
            FfiConverterBool.write(isMove, into: &buf)

        case let .delete(delete):
            writeInt(&buf, Int32(2))
            FfiConverterUInt32.write(delete, into: &buf)

        case let .retain(retain):
            writeInt(&buf, Int32(3))
            FfiConverterUInt32.write(retain, into: &buf)
        }
    }
}

public func FfiConverterTypeListDiffItem_lift(_ buf: RustBuffer) throws -> ListDiffItem {
    return try FfiConverterTypeListDiffItem.lift(buf)
}

public func FfiConverterTypeListDiffItem_lower(_ value: ListDiffItem) -> RustBuffer {
    return FfiConverterTypeListDiffItem.lower(value)
}

public enum LoroError {
    case UnmatchedContext(message: String)

    case DecodeVersionVectorError(message: String)

    case DecodeError(message: String)

    case DecodeDataCorruptionError(message: String)

    case DecodeChecksumMismatchError(message: String)

    case IncompatibleFutureEncodingError(message: String)

    case JsError(message: String)

    case LockError(message: String)

    case DuplicatedTransactionError(message: String)

    case NotFoundError(message: String)

    case TransactionError(message: String)

    case OutOfBound(message: String)

    case UsedOpId(message: String)

    case TreeError(message: String)

    case ArgErr(message: String)

    case AutoCommitNotStarted(message: String)

    case StyleConfigMissing(message: String)

    case Unknown(message: String)

    case FrontiersNotFound(message: String)

    case ImportWhenInTxn(message: String)

    case MisuseDetachedContainer(message: String)

    case NotImplemented(message: String)

    case ReattachAttachedContainer(message: String)

    case EditWhenDetached(message: String)

    case UndoInvalidIdSpan(message: String)

    case UndoWithDifferentPeerId(message: String)

    case InvalidJsonSchema(message: String)

    case Utf8InUnicodeCodePoint(message: String)

    case Utf16InUnicodeCodePoint(message: String)

    case EndIndexLessThanStartIndex(message: String)

    case InvalidRootContainerName(message: String)
}

public struct FfiConverterTypeLoroError: FfiConverterRustBuffer {
    typealias SwiftType = LoroError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .UnmatchedContext(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .DecodeVersionVectorError(
                message: FfiConverterString.read(from: &buf)
            )

        case 3: return try .DecodeError(
                message: FfiConverterString.read(from: &buf)
            )

        case 4: return try .DecodeDataCorruptionError(
                message: FfiConverterString.read(from: &buf)
            )

        case 5: return try .DecodeChecksumMismatchError(
                message: FfiConverterString.read(from: &buf)
            )

        case 6: return try .IncompatibleFutureEncodingError(
                message: FfiConverterString.read(from: &buf)
            )

        case 7: return try .JsError(
                message: FfiConverterString.read(from: &buf)
            )

        case 8: return try .LockError(
                message: FfiConverterString.read(from: &buf)
            )

        case 9: return try .DuplicatedTransactionError(
                message: FfiConverterString.read(from: &buf)
            )

        case 10: return try .NotFoundError(
                message: FfiConverterString.read(from: &buf)
            )

        case 11: return try .TransactionError(
                message: FfiConverterString.read(from: &buf)
            )

        case 12: return try .OutOfBound(
                message: FfiConverterString.read(from: &buf)
            )

        case 13: return try .UsedOpId(
                message: FfiConverterString.read(from: &buf)
            )

        case 14: return try .TreeError(
                message: FfiConverterString.read(from: &buf)
            )

        case 15: return try .ArgErr(
                message: FfiConverterString.read(from: &buf)
            )

        case 16: return try .AutoCommitNotStarted(
                message: FfiConverterString.read(from: &buf)
            )

        case 17: return try .StyleConfigMissing(
                message: FfiConverterString.read(from: &buf)
            )

        case 18: return try .Unknown(
                message: FfiConverterString.read(from: &buf)
            )

        case 19: return try .FrontiersNotFound(
                message: FfiConverterString.read(from: &buf)
            )

        case 20: return try .ImportWhenInTxn(
                message: FfiConverterString.read(from: &buf)
            )

        case 21: return try .MisuseDetachedContainer(
                message: FfiConverterString.read(from: &buf)
            )

        case 22: return try .NotImplemented(
                message: FfiConverterString.read(from: &buf)
            )

        case 23: return try .ReattachAttachedContainer(
                message: FfiConverterString.read(from: &buf)
            )

        case 24: return try .EditWhenDetached(
                message: FfiConverterString.read(from: &buf)
            )

        case 25: return try .UndoInvalidIdSpan(
                message: FfiConverterString.read(from: &buf)
            )

        case 26: return try .UndoWithDifferentPeerId(
                message: FfiConverterString.read(from: &buf)
            )

        case 27: return try .InvalidJsonSchema(
                message: FfiConverterString.read(from: &buf)
            )

        case 28: return try .Utf8InUnicodeCodePoint(
                message: FfiConverterString.read(from: &buf)
            )

        case 29: return try .Utf16InUnicodeCodePoint(
                message: FfiConverterString.read(from: &buf)
            )

        case 30: return try .EndIndexLessThanStartIndex(
                message: FfiConverterString.read(from: &buf)
            )

        case 31: return try .InvalidRootContainerName(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LoroError, into buf: inout [UInt8]) {
        switch value {
        case .UnmatchedContext(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .DecodeVersionVectorError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        case .DecodeError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(3))
        case .DecodeDataCorruptionError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(4))
        case .DecodeChecksumMismatchError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(5))
        case .IncompatibleFutureEncodingError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(6))
        case .JsError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(7))
        case .LockError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(8))
        case .DuplicatedTransactionError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(9))
        case .NotFoundError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(10))
        case .TransactionError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(11))
        case .OutOfBound(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(12))
        case .UsedOpId(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(13))
        case .TreeError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(14))
        case .ArgErr(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(15))
        case .AutoCommitNotStarted(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(16))
        case .StyleConfigMissing(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(17))
        case .Unknown(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(18))
        case .FrontiersNotFound(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(19))
        case .ImportWhenInTxn(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(20))
        case .MisuseDetachedContainer(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(21))
        case .NotImplemented(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(22))
        case .ReattachAttachedContainer(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(23))
        case .EditWhenDetached(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(24))
        case .UndoInvalidIdSpan(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(25))
        case .UndoWithDifferentPeerId(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(26))
        case .InvalidJsonSchema(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(27))
        case .Utf8InUnicodeCodePoint(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(28))
        case .Utf16InUnicodeCodePoint(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(29))
        case .EndIndexLessThanStartIndex(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(30))
        case .InvalidRootContainerName(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(31))
        }
    }
}

extension LoroError: Equatable, Hashable {}

extension LoroError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum LoroValue {
    case null
    case bool(value: Bool
    )
    case double(value: Double
    )
    case i64(value: Int64
    )
    case binary(value: [UInt8]
    )
    case string(value: String
    )
    case list(value: [LoroValue]
    )
    case map(value: [String: LoroValue]
    )
    case container(value: ContainerId
    )
}

public struct FfiConverterTypeLoroValue: FfiConverterRustBuffer {
    typealias SwiftType = LoroValue

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroValue {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .null

        case 2: return try .bool(value: FfiConverterBool.read(from: &buf)
            )

        case 3: return try .double(value: FfiConverterDouble.read(from: &buf)
            )

        case 4: return try .i64(value: FfiConverterInt64.read(from: &buf)
            )

        case 5: return try .binary(value: FfiConverterSequenceUInt8.read(from: &buf)
            )

        case 6: return try .string(value: FfiConverterString.read(from: &buf)
            )

        case 7: return try .list(value: FfiConverterSequenceTypeLoroValue.read(from: &buf)
            )

        case 8: return try .map(value: FfiConverterDictionaryStringTypeLoroValue.read(from: &buf)
            )

        case 9: return try .container(value: FfiConverterTypeContainerID.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LoroValue, into buf: inout [UInt8]) {
        switch value {
        case .null:
            writeInt(&buf, Int32(1))

        case let .bool(value):
            writeInt(&buf, Int32(2))
            FfiConverterBool.write(value, into: &buf)

        case let .double(value):
            writeInt(&buf, Int32(3))
            FfiConverterDouble.write(value, into: &buf)

        case let .i64(value):
            writeInt(&buf, Int32(4))
            FfiConverterInt64.write(value, into: &buf)

        case let .binary(value):
            writeInt(&buf, Int32(5))
            FfiConverterSequenceUInt8.write(value, into: &buf)

        case let .string(value):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(value, into: &buf)

        case let .list(value):
            writeInt(&buf, Int32(7))
            FfiConverterSequenceTypeLoroValue.write(value, into: &buf)

        case let .map(value):
            writeInt(&buf, Int32(8))
            FfiConverterDictionaryStringTypeLoroValue.write(value, into: &buf)

        case let .container(value):
            writeInt(&buf, Int32(9))
            FfiConverterTypeContainerID.write(value, into: &buf)
        }
    }
}

public func FfiConverterTypeLoroValue_lift(_ buf: RustBuffer) throws -> LoroValue {
    return try FfiConverterTypeLoroValue.lift(buf)
}

public func FfiConverterTypeLoroValue_lower(_ value: LoroValue) -> RustBuffer {
    return FfiConverterTypeLoroValue.lower(value)
}

extension LoroValue: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Side {
    case left
    case middle
    case right
}

public struct FfiConverterTypeSide: FfiConverterRustBuffer {
    typealias SwiftType = Side

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Side {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .left

        case 2: return .middle

        case 3: return .right

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Side, into buf: inout [UInt8]) {
        switch value {
        case .left:
            writeInt(&buf, Int32(1))

        case .middle:
            writeInt(&buf, Int32(2))

        case .right:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypeSide_lift(_ buf: RustBuffer) throws -> Side {
    return try FfiConverterTypeSide.lift(buf)
}

public func FfiConverterTypeSide_lower(_ value: Side) -> RustBuffer {
    return FfiConverterTypeSide.lower(value)
}

extension Side: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TextDelta {
    case retain(retain: UInt32, attributes: [String: LoroValue]?)
    case insert(insert: String, attributes: [String: LoroValue]?)
    case delete(delete: UInt32
    )
}

public struct FfiConverterTypeTextDelta: FfiConverterRustBuffer {
    typealias SwiftType = TextDelta

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TextDelta {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .retain(retain: FfiConverterUInt32.read(from: &buf), attributes: FfiConverterOptionDictionaryStringTypeLoroValue.read(from: &buf))

        case 2: return try .insert(insert: FfiConverterString.read(from: &buf), attributes: FfiConverterOptionDictionaryStringTypeLoroValue.read(from: &buf))

        case 3: return try .delete(delete: FfiConverterUInt32.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TextDelta, into buf: inout [UInt8]) {
        switch value {
        case let .retain(retain, attributes):
            writeInt(&buf, Int32(1))
            FfiConverterUInt32.write(retain, into: &buf)
            FfiConverterOptionDictionaryStringTypeLoroValue.write(attributes, into: &buf)

        case let .insert(insert, attributes):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(insert, into: &buf)
            FfiConverterOptionDictionaryStringTypeLoroValue.write(attributes, into: &buf)

        case let .delete(delete):
            writeInt(&buf, Int32(3))
            FfiConverterUInt32.write(delete, into: &buf)
        }
    }
}

public func FfiConverterTypeTextDelta_lift(_ buf: RustBuffer) throws -> TextDelta {
    return try FfiConverterTypeTextDelta.lift(buf)
}

public func FfiConverterTypeTextDelta_lower(_ value: TextDelta) -> RustBuffer {
    return FfiConverterTypeTextDelta.lower(value)
}

extension TextDelta: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TreeExternalDiff {
    case create(parent: TreeId?, index: UInt32, fractionalIndex: String)
    case move(parent: TreeId?, index: UInt32, fractionalIndex: String)
    case delete
}

public struct FfiConverterTypeTreeExternalDiff: FfiConverterRustBuffer {
    typealias SwiftType = TreeExternalDiff

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TreeExternalDiff {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .create(parent: FfiConverterOptionTypeTreeID.read(from: &buf), index: FfiConverterUInt32.read(from: &buf), fractionalIndex: FfiConverterString.read(from: &buf))

        case 2: return try .move(parent: FfiConverterOptionTypeTreeID.read(from: &buf), index: FfiConverterUInt32.read(from: &buf), fractionalIndex: FfiConverterString.read(from: &buf))

        case 3: return .delete

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TreeExternalDiff, into buf: inout [UInt8]) {
        switch value {
        case let .create(parent, index, fractionalIndex):
            writeInt(&buf, Int32(1))
            FfiConverterOptionTypeTreeID.write(parent, into: &buf)
            FfiConverterUInt32.write(index, into: &buf)
            FfiConverterString.write(fractionalIndex, into: &buf)

        case let .move(parent, index, fractionalIndex):
            writeInt(&buf, Int32(2))
            FfiConverterOptionTypeTreeID.write(parent, into: &buf)
            FfiConverterUInt32.write(index, into: &buf)
            FfiConverterString.write(fractionalIndex, into: &buf)

        case .delete:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypeTreeExternalDiff_lift(_ buf: RustBuffer) throws -> TreeExternalDiff {
    return try FfiConverterTypeTreeExternalDiff.lift(buf)
}

public func FfiConverterTypeTreeExternalDiff_lower(_ value: TreeExternalDiff) -> RustBuffer {
    return FfiConverterTypeTreeExternalDiff.lower(value)
}

extension TreeExternalDiff: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum UndoOrRedo {
    case undo
    case redo
}

public struct FfiConverterTypeUndoOrRedo: FfiConverterRustBuffer {
    typealias SwiftType = UndoOrRedo

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UndoOrRedo {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .undo

        case 2: return .redo

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: UndoOrRedo, into buf: inout [UInt8]) {
        switch value {
        case .undo:
            writeInt(&buf, Int32(1))

        case .redo:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeUndoOrRedo_lift(_ buf: RustBuffer) throws -> UndoOrRedo {
    return try FfiConverterTypeUndoOrRedo.lift(buf)
}

public func FfiConverterTypeUndoOrRedo_lower(_ value: UndoOrRedo) -> RustBuffer {
    return FfiConverterTypeUndoOrRedo.lower(value)
}

extension UndoOrRedo: Equatable, Hashable {}

private struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionInt32: FfiConverterRustBuffer {
    typealias SwiftType = Int32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeCursor: FfiConverterRustBuffer {
    typealias SwiftType = Cursor?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCursor.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCursor.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeLoroCounter: FfiConverterRustBuffer {
    typealias SwiftType = LoroCounter?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroCounter.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroCounter.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeLoroList: FfiConverterRustBuffer {
    typealias SwiftType = LoroList?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroList.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroList.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeLoroMap: FfiConverterRustBuffer {
    typealias SwiftType = LoroMap?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroMap.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroMap.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeLoroMovableList: FfiConverterRustBuffer {
    typealias SwiftType = LoroMovableList?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroMovableList.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroMovableList.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeLoroText: FfiConverterRustBuffer {
    typealias SwiftType = LoroText?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroText.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroText.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeLoroTree: FfiConverterRustBuffer {
    typealias SwiftType = LoroTree?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroTree.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroTree.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeOnPop: FfiConverterRustBuffer {
    typealias SwiftType = OnPop?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeOnPop.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeOnPop.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeOnPush: FfiConverterRustBuffer {
    typealias SwiftType = OnPush?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeOnPush.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeOnPush.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeValueOrContainer: FfiConverterRustBuffer {
    typealias SwiftType = ValueOrContainer?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeValueOrContainer.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeValueOrContainer.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeVersionVector: FfiConverterRustBuffer {
    typealias SwiftType = VersionVector?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeVersionVector.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeVersionVector.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeID: FfiConverterRustBuffer {
    typealias SwiftType = Id?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeID.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeID.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeTreeID: FfiConverterRustBuffer {
    typealias SwiftType = TreeId?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTreeID.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTreeID.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeContainerID: FfiConverterRustBuffer {
    typealias SwiftType = ContainerId?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeContainerID.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeContainerID.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeLoroValue: FfiConverterRustBuffer {
    typealias SwiftType = LoroValue?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroValue.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroValue.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionSequenceTypeTreeID: FfiConverterRustBuffer {
    typealias SwiftType = [TreeId]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeTreeID.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeTreeID.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionDictionaryStringTypeLoroValue: FfiConverterRustBuffer {
    typealias SwiftType = [String: LoroValue]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringTypeLoroValue.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringTypeLoroValue.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceData: FfiConverterRustBuffer {
    typealias SwiftType = [Data]

    public static func write(_ value: [Data], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterData.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Data] {
        let len: Int32 = try readInt(&buf)
        var seq = [Data]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterData.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeValueOrContainer: FfiConverterRustBuffer {
    typealias SwiftType = [ValueOrContainer]

    public static func write(_ value: [ValueOrContainer], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeValueOrContainer.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ValueOrContainer] {
        let len: Int32 = try readInt(&buf)
        var seq = [ValueOrContainer]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeValueOrContainer.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeContainerDiff: FfiConverterRustBuffer {
    typealias SwiftType = [ContainerDiff]

    public static func write(_ value: [ContainerDiff], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeContainerDiff.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ContainerDiff] {
        let len: Int32 = try readInt(&buf)
        var seq = [ContainerDiff]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeContainerDiff.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeCursorWithPos: FfiConverterRustBuffer {
    typealias SwiftType = [CursorWithPos]

    public static func write(_ value: [CursorWithPos], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeCursorWithPos.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [CursorWithPos] {
        let len: Int32 = try readInt(&buf)
        var seq = [CursorWithPos]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeCursorWithPos.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypePathItem: FfiConverterRustBuffer {
    typealias SwiftType = [PathItem]

    public static func write(_ value: [PathItem], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePathItem.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PathItem] {
        let len: Int32 = try readInt(&buf)
        var seq = [PathItem]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypePathItem.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeTreeDiffItem: FfiConverterRustBuffer {
    typealias SwiftType = [TreeDiffItem]

    public static func write(_ value: [TreeDiffItem], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTreeDiffItem.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TreeDiffItem] {
        let len: Int32 = try readInt(&buf)
        var seq = [TreeDiffItem]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeTreeDiffItem.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeTreeID: FfiConverterRustBuffer {
    typealias SwiftType = [TreeId]

    public static func write(_ value: [TreeId], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTreeID.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TreeId] {
        let len: Int32 = try readInt(&buf)
        var seq = [TreeId]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeTreeID.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeIndex: FfiConverterRustBuffer {
    typealias SwiftType = [Index]

    public static func write(_ value: [Index], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIndex.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Index] {
        let len: Int32 = try readInt(&buf)
        var seq = [Index]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeIndex.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeListDiffItem: FfiConverterRustBuffer {
    typealias SwiftType = [ListDiffItem]

    public static func write(_ value: [ListDiffItem], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeListDiffItem.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ListDiffItem] {
        let len: Int32 = try readInt(&buf)
        var seq = [ListDiffItem]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeListDiffItem.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeLoroValue: FfiConverterRustBuffer {
    typealias SwiftType = [LoroValue]

    public static func write(_ value: [LoroValue], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLoroValue.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [LoroValue] {
        let len: Int32 = try readInt(&buf)
        var seq = [LoroValue]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeLoroValue.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeTextDelta: FfiConverterRustBuffer {
    typealias SwiftType = [TextDelta]

    public static func write(_ value: [TextDelta], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTextDelta.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TextDelta] {
        let len: Int32 = try readInt(&buf)
        var seq = [TextDelta]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeTextDelta.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterDictionaryStringTypeLoroValue: FfiConverterRustBuffer {
    public static func write(_ value: [String: LoroValue], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeLoroValue.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: LoroValue] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: LoroValue]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeLoroValue.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

private struct FfiConverterDictionaryStringOptionTypeValueOrContainer: FfiConverterRustBuffer {
    public static func write(_ value: [String: ValueOrContainer?], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterOptionTypeValueOrContainer.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: ValueOrContainer?] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: ValueOrContainer?]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterOptionTypeValueOrContainer.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias SubId = UInt32
public struct FfiConverterTypeSubID: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SubId {
        return try FfiConverterUInt32.read(from: &buf)
    }

    public static func write(_ value: SubId, into buf: inout [UInt8]) {
        return FfiConverterUInt32.write(value, into: &buf)
    }

    public static func lift(_ value: UInt32) throws -> SubId {
        return try FfiConverterUInt32.lift(value)
    }

    public static func lower(_ value: SubId) -> UInt32 {
        return FfiConverterUInt32.lower(value)
    }
}

public func FfiConverterTypeSubID_lift(_ value: UInt32) throws -> SubId {
    return try FfiConverterTypeSubID.lift(value)
}

public func FfiConverterTypeSubID_lower(_ value: SubId) -> UInt32 {
    return FfiConverterTypeSubID.lower(value)
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_loro_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_loro_checksum_method_containeridlike_as_container_id() != 41081 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorocounter_decrement() != 53919 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorocounter_get_value() != 44616 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorocounter_id() != 31148 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorocounter_increment() != 47367 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_attach() != 7252 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_checkout() != 415 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_checkout_to_latest() != 2349 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_commit() != 53174 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_detach() != 61399 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_export_from() != 2990 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_export_snapshot() != 8377 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_fork() != 45665 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_frontiers_to_vv() != 11123 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_get_by_path() != 35945 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_get_by_str_path() != 6739 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_get_counter() != 12597 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_get_deep_value() != 3404 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_get_list() != 9609 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_get_map() != 63137 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_get_movable_list() != 7302 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_get_text() != 56069 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_get_tree() != 54189 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_import() != 8639 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_import_batch() != 60062 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_import_with() != 59166 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_is_detached() != 30909 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_len_changes() != 62401 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_len_ops() != 11644 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_oplog_frontiers() != 49043 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_oplog_vv() != 56754 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_peer_id() != 35449 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_set_change_merge_interval() != 55133 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_set_fractional_index_jitter() != 47450 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_set_peer_id() != 29379 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_set_record_timestamp() != 15945 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_state_frontiers() != 17079 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_state_vv() != 1627 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_subscribe() != 28252 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_subscribe_root() != 7800 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_unsubscribe() != 32901 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorodoc_vv_to_frontiers() != 47960 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_delete() != 40414 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_get() != 36174 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_get_cursor() != 42636 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_get_deep_value() != 9355 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_get_value() != 14384 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_id() != 33887 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_insert() != 19544 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_insert_counter_container() != 41569 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_insert_list_container() != 42165 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_insert_map_container() != 25622 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_insert_movable_list_container() != 23559 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_insert_text_container() != 26631 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_insert_tree_container() != 15665 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_is_attached() != 60548 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_is_empty() != 13469 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_len() != 22800 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_pop() != 20748 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorolist_push() != 32091 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_delete() != 54675 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_get() != 57695 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_get_deep_value() != 23748 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_get_value() != 7268 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_id() != 65486 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_insert() != 748 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_insert_counter_container() != 5567 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_insert_list_container() != 52804 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_insert_map_container() != 36523 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_insert_movable_list_container() != 21076 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_insert_text_container() != 50348 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_insert_tree_container() != 59771 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_is_attached() != 6283 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_is_empty() != 38768 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromap_len() != 38088 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_delete() != 51786 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_get() != 10599 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_get_cursor() != 118 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_get_deep_value() != 18542 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_get_value() != 50843 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_id() != 9803 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_insert() != 28537 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_insert_counter_container() != 56222 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_insert_list_container() != 47190 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_insert_map_container() != 57810 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_insert_movable_list_container() != 6019 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_insert_text_container() != 48945 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_insert_tree_container() != 33670 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_is_attached() != 50724 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_is_empty() != 44651 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_len() != 28945 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_mov() != 8301 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_pop() != 52086 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_push() != 2828 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_set() != 27054 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_set_counter_container() != 1414 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_set_list_container() != 20393 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_set_map_container() != 20297 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_set_movable_list_container() != 52254 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_set_text_container() != 31935 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_loromovablelist_set_tree_container() != 8298 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_delete() != 47933 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_delete_utf8() != 44384 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_get_cursor() != 57876 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_id() != 30925 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_insert() != 10847 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_insert_utf8() != 8484 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_is_attached() != 45378 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_is_empty() != 7961 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_len_unicode() != 46650 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_len_utf16() != 18865 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_len_utf8() != 29025 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_mark() != 42690 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_slice() != 43152 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_splice() != 30467 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_to_delta() != 57631 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_to_string() != 63765 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_unmark() != 14351 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotext_update() != 55624 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_children() != 53501 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_children_num() != 14969 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_contains() != 62174 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_create() != 44237 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_create_at() != 42548 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_delete() != 36355 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_fractional_index() != 51036 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_get_meta() != 3068 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_get_value() != 44704 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_get_value_with_meta() != 7497 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_id() != 4862 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_is_attached() != 37303 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_mov() != 51136 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_mov_after() != 48871 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_mov_before() != 39654 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_mov_to() != 12640 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_nodes() != 31738 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorotree_parent() != 11311 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorounknown_id() != 65156 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_lorovaluelike_as_loro_value() != 23668 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_onpop_on_pop() != 39438 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_onpush_on_push() != 4043 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_subscriber_on_diff() != 462 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_undomanager_add_exclude_origin_prefix() != 61306 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_undomanager_can_redo() != 61543 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_undomanager_can_undo() != 51532 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_undomanager_record_new_checkpoint() != 35753 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_undomanager_redo() != 55485 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_undomanager_set_max_undo_steps() != 43243 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_undomanager_set_merge_interval() != 13688 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_undomanager_set_on_pop() != 4141 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_undomanager_set_on_push() != 31009 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_undomanager_undo() != 32659 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_valueorcontainer_as_container() != 61163 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_valueorcontainer_as_loro_counter() != 51072 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_valueorcontainer_as_loro_list() != 16144 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_valueorcontainer_as_loro_map() != 62391 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_valueorcontainer_as_loro_movable_list() != 49359 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_valueorcontainer_as_loro_text() != 8015 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_valueorcontainer_as_loro_tree() != 39545 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_valueorcontainer_as_value() != 9638 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_valueorcontainer_is_container() != 16329 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_valueorcontainer_is_value() != 13911 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_versionvector_get_last() != 45434 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_versionvector_includes_id() != 50408 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_method_versionvector_includes_vv() != 23089 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_constructor_cursor_new() != 11721 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_constructor_lorocounter_new() != 44867 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_constructor_lorodoc_new() != 54129 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_constructor_lorolist_new() != 2861 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_constructor_loromap_new() != 63806 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_constructor_loromovablelist_new() != 32944 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_constructor_lorotext_new() != 33191 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_constructor_lorotree_new() != 42150 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_constructor_undomanager_new() != 35328 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_loro_checksum_constructor_versionvector_new() != 31126 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitContainerIdLike()
    uniffiCallbackInitLoroValueLike()
    uniffiCallbackInitOnPop()
    uniffiCallbackInitOnPush()
    uniffiCallbackInitSubscriber()
    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
